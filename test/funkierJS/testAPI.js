(function() {
  "use strict";


  /* NOTE: THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY */


  var expect = require('chai').expect;
  var funkier = require('../../lib/funkier');


  describe('Documented values', function() {
    describe('arity', function() {
      it('arity exists', function() {
        expect(funkier).to.have.a.property('arity');
      });


      it('funkierJS\'s arity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.arity).to.equal(module.arity);
      });


      it('arity is a function', function() {
        expect(funkier.arity).to.be.a('function');
      });


      it('arity has documented arity', function() {
        expect(funkier.arityOf(funkier.arity)).to.equal(1);
      });


      it('arity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.arity)).to.equal(true);
      });
    });


    describe('bar', function() {
      it('bar exists', function() {
        expect(funkier).to.have.a.property('bar');
      });


      it('bar is a synonym for arity', function() {
        expect(funkier.bar).to.equal(funkier.arity);
      });
    });


    describe('foo', function() {
      it('foo exists', function() {
        expect(funkier).to.have.a.property('foo');
      });


      it('foo is a synonym for arity', function() {
        expect(funkier.foo).to.equal(funkier.arity);
      });
    });
  });


  describe('Exported values', function() {
    var documentedNames;


    beforeEach(function() {
      documentedNames = ['help', 'arity'];
    });


    Object.keys(funkier).forEach(function(k) {
      var prop = funkier[k];
      if (k[0] === '_' || prop === null ||
          (typeof(prop) !== 'object' && typeof(prop) !== 'function'))
        return;

      it(k + ' is documented', function() {
        expect(documentedNames.indexOf(k)).to.not.equal(-1);
      });
    });
  });
})();
