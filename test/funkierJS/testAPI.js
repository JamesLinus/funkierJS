(function() {
  "use strict";


  /* NOTE: THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY */


  var expect = require('chai').expect;
  var funkier = require('../../lib/funkier');


  describe('Documented values', function() {
    describe('Err', function() {
      it('Err exists', function() {
        expect(funkier).to.have.a.property('Err');
      });


      it('funkierJS\'s Err is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.Err).to.equal(module.Err);
      });


      it('Err is a function', function() {
        expect(funkier.Err).to.be.a('function');
      });


      it('Err has documented arity', function() {
        expect(funkier.arityOf(funkier.Err)).to.equal(1);
      });


    });


    describe('Just', function() {
      it('Just exists', function() {
        expect(funkier).to.have.a.property('Just');
      });


      it('funkierJS\'s Just is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.Just).to.equal(module.Just);
      });


      it('Just is a function', function() {
        expect(funkier.Just).to.be.a('function');
      });


      it('Just has documented arity', function() {
        expect(funkier.arityOf(funkier.Just)).to.equal(1);
      });


    });


    describe('Maybe', function() {
      it('Maybe exists', function() {
        expect(funkier).to.have.a.property('Maybe');
      });


      it('funkierJS\'s Maybe is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.Maybe).to.equal(module.Maybe);
      });


      it('Maybe is a function', function() {
        expect(funkier.Maybe).to.be.a('function');
      });


      it('Maybe has documented arity', function() {
        expect(funkier.arityOf(funkier.Maybe)).to.equal(0);
      });


    });


    describe('Nothing', function() {
      it('Nothing exists', function() {
        expect(funkier).to.have.a.property('Nothing');
      });


      it('funkierJS\'s Nothing is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.Nothing).to.equal(module.Nothing);
      });


      it('Nothing is an object', function() {
        expect(funkier.Nothing).to.be.an('object');
      });
    });


    describe('Ok', function() {
      it('Ok exists', function() {
        expect(funkier).to.have.a.property('Ok');
      });


      it('funkierJS\'s Ok is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.Ok).to.equal(module.Ok);
      });


      it('Ok is a function', function() {
        expect(funkier.Ok).to.be.a('function');
      });


      it('Ok has documented arity', function() {
        expect(funkier.arityOf(funkier.Ok)).to.equal(1);
      });


    });


    describe('Pair', function() {
      it('Pair exists', function() {
        expect(funkier).to.have.a.property('Pair');
      });


      it('funkierJS\'s Pair is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.Pair).to.equal(module.Pair);
      });


      it('Pair is a function', function() {
        expect(funkier.Pair).to.be.a('function');
      });


      it('Pair has documented arity', function() {
        expect(funkier.arityOf(funkier.Pair)).to.equal(2);
      });


    });


    describe('Result', function() {
      it('Result exists', function() {
        expect(funkier).to.have.a.property('Result');
      });


      it('funkierJS\'s Result is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.Result).to.equal(module.Result);
      });


      it('Result is a function', function() {
        expect(funkier.Result).to.be.a('function');
      });


      it('Result has documented arity', function() {
        expect(funkier.arityOf(funkier.Result)).to.equal(0);
      });


    });


    describe('add', function() {
      it('add exists', function() {
        expect(funkier).to.have.a.property('add');
      });


      it('funkierJS\'s add is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.add).to.equal(module.add);
      });


      it('add is a function', function() {
        expect(funkier.add).to.be.a('function');
      });


      it('add has documented arity', function() {
        expect(funkier.arityOf(funkier.add)).to.equal(2);
      });


      it('add is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.add)).to.equal(true);
      });
    });


    describe('and', function() {
      it('and exists', function() {
        expect(funkier).to.have.a.property('and');
      });


      it('funkierJS\'s and is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.and).to.equal(module.and);
      });


      it('and is a function', function() {
        expect(funkier.and).to.be.a('function');
      });


      it('and has documented arity', function() {
        expect(funkier.arityOf(funkier.and)).to.equal(2);
      });


      it('and is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.and)).to.equal(true);
      });
    });


    describe('andPred', function() {
      it('andPred exists', function() {
        expect(funkier).to.have.a.property('andPred');
      });


      it('funkierJS\'s andPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.andPred).to.equal(module.andPred);
      });


      it('andPred is a function', function() {
        expect(funkier.andPred).to.be.a('function');
      });


      it('andPred has documented arity', function() {
        expect(funkier.arityOf(funkier.andPred)).to.equal(2);
      });


      it('andPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.andPred)).to.equal(true);
      });
    });


    describe('arity', function() {
      it('arity exists', function() {
        expect(funkier).to.have.a.property('arity');
      });


      it('arity is a synonym for arityOf', function() {
        expect(funkier.arity).to.equal(funkier.arityOf);
      });
    });


    describe('arityOf', function() {
      it('arityOf exists', function() {
        expect(funkier).to.have.a.property('arityOf');
      });


      it('funkierJS\'s arityOf is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.arityOf).to.equal(module.arityOf);
      });


      it('arityOf is a function', function() {
        expect(funkier.arityOf).to.be.a('function');
      });


      it('arityOf has documented arity', function() {
        expect(funkier.arityOf(funkier.arityOf)).to.equal(1);
      });


      it('arityOf is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.arityOf)).to.equal(true);
      });
    });


    describe('asArray', function() {
      it('asArray exists', function() {
        expect(funkier).to.have.a.property('asArray');
      });


      it('funkierJS\'s asArray is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.asArray).to.equal(module.asArray);
      });


      it('asArray is a function', function() {
        expect(funkier.asArray).to.be.a('function');
      });


      it('asArray has documented arity', function() {
        expect(funkier.arityOf(funkier.asArray)).to.equal(1);
      });


      it('asArray is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.asArray)).to.equal(true);
      });
    });


    describe('bind', function() {
      it('bind exists', function() {
        expect(funkier).to.have.a.property('bind');
      });


      it('funkierJS\'s bind is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.bind).to.equal(module.bind);
      });


      it('bind is a function', function() {
        expect(funkier.bind).to.be.a('function');
      });


      it('bind has documented arity', function() {
        expect(funkier.arityOf(funkier.bind)).to.equal(2);
      });


      it('bind is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bind)).to.equal(true);
      });
    });


    describe('bindWithContext', function() {
      it('bindWithContext exists', function() {
        expect(funkier).to.have.a.property('bindWithContext');
      });


      it('bindWithContext is a synonym for bind', function() {
        expect(funkier.bindWithContext).to.equal(funkier.bind);
      });
    });


    describe('bindWithContextAndArity', function() {
      it('bindWithContextAndArity exists', function() {
        expect(funkier).to.have.a.property('bindWithContextAndArity');
      });


      it('funkierJS\'s bindWithContextAndArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.bindWithContextAndArity).to.equal(module.bindWithContextAndArity);
      });


      it('bindWithContextAndArity is a function', function() {
        expect(funkier.bindWithContextAndArity).to.be.a('function');
      });


      it('bindWithContextAndArity has documented arity', function() {
        expect(funkier.arityOf(funkier.bindWithContextAndArity)).to.equal(3);
      });


      it('bindWithContextAndArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bindWithContextAndArity)).to.equal(true);
      });
    });


    describe('bitwiseAnd', function() {
      it('bitwiseAnd exists', function() {
        expect(funkier).to.have.a.property('bitwiseAnd');
      });


      it('funkierJS\'s bitwiseAnd is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseAnd).to.equal(module.bitwiseAnd);
      });


      it('bitwiseAnd is a function', function() {
        expect(funkier.bitwiseAnd).to.be.a('function');
      });


      it('bitwiseAnd has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseAnd)).to.equal(2);
      });


      it('bitwiseAnd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseAnd)).to.equal(true);
      });
    });


    describe('bitwiseNot', function() {
      it('bitwiseNot exists', function() {
        expect(funkier).to.have.a.property('bitwiseNot');
      });


      it('funkierJS\'s bitwiseNot is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseNot).to.equal(module.bitwiseNot);
      });


      it('bitwiseNot is a function', function() {
        expect(funkier.bitwiseNot).to.be.a('function');
      });


      it('bitwiseNot has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseNot)).to.equal(1);
      });


      it('bitwiseNot is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseNot)).to.equal(true);
      });
    });


    describe('bitwiseOr', function() {
      it('bitwiseOr exists', function() {
        expect(funkier).to.have.a.property('bitwiseOr');
      });


      it('funkierJS\'s bitwiseOr is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseOr).to.equal(module.bitwiseOr);
      });


      it('bitwiseOr is a function', function() {
        expect(funkier.bitwiseOr).to.be.a('function');
      });


      it('bitwiseOr has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseOr)).to.equal(2);
      });


      it('bitwiseOr is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseOr)).to.equal(true);
      });
    });


    describe('bitwiseXor', function() {
      it('bitwiseXor exists', function() {
        expect(funkier).to.have.a.property('bitwiseXor');
      });


      it('funkierJS\'s bitwiseXor is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseXor).to.equal(module.bitwiseXor);
      });


      it('bitwiseXor is a function', function() {
        expect(funkier.bitwiseXor).to.be.a('function');
      });


      it('bitwiseXor has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseXor)).to.equal(2);
      });


      it('bitwiseXor is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseXor)).to.equal(true);
      });
    });


    describe('compose', function() {
      it('compose exists', function() {
        expect(funkier).to.have.a.property('compose');
      });


      it('funkierJS\'s compose is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.compose).to.equal(module.compose);
      });


      it('compose is a function', function() {
        expect(funkier.compose).to.be.a('function');
      });


      it('compose has documented arity', function() {
        expect(funkier.arityOf(funkier.compose)).to.equal(2);
      });


      it('compose is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.compose)).to.equal(true);
      });
    });


    describe('composeMany', function() {
      it('composeMany exists', function() {
        expect(funkier).to.have.a.property('composeMany');
      });


      it('funkierJS\'s composeMany is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.composeMany).to.equal(module.composeMany);
      });


      it('composeMany is a function', function() {
        expect(funkier.composeMany).to.be.a('function');
      });


      it('composeMany has documented arity', function() {
        expect(funkier.arityOf(funkier.composeMany)).to.equal(1);
      });


      it('composeMany is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.composeMany)).to.equal(true);
      });
    });


    describe('composeOn', function() {
      it('composeOn exists', function() {
        expect(funkier).to.have.a.property('composeOn');
      });


      it('funkierJS\'s composeOn is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.composeOn).to.equal(module.composeOn);
      });


      it('composeOn is a function', function() {
        expect(funkier.composeOn).to.be.a('function');
      });


      it('composeOn has documented arity', function() {
        expect(funkier.arityOf(funkier.composeOn)).to.equal(3);
      });


      it('composeOn is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.composeOn)).to.equal(true);
      });
    });


    describe('constant', function() {
      it('constant exists', function() {
        expect(funkier).to.have.a.property('constant');
      });


      it('funkierJS\'s constant is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.constant).to.equal(module.constant);
      });


      it('constant is a function', function() {
        expect(funkier.constant).to.be.a('function');
      });


      it('constant has documented arity', function() {
        expect(funkier.arityOf(funkier.constant)).to.equal(2);
      });


      it('constant is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.constant)).to.equal(true);
      });
    });


    describe('constant0', function() {
      it('constant0 exists', function() {
        expect(funkier).to.have.a.property('constant0');
      });


      it('funkierJS\'s constant0 is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.constant0).to.equal(module.constant0);
      });


      it('constant0 is a function', function() {
        expect(funkier.constant0).to.be.a('function');
      });


      it('constant0 has documented arity', function() {
        expect(funkier.arityOf(funkier.constant0)).to.equal(1);
      });


      it('constant0 is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.constant0)).to.equal(true);
      });
    });


    describe('curry', function() {
      it('curry exists', function() {
        expect(funkier).to.have.a.property('curry');
      });


      it('funkierJS\'s curry is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.curry).to.equal(module.curry);
      });


      it('curry is a function', function() {
        expect(funkier.curry).to.be.a('function');
      });


      it('curry has documented arity', function() {
        expect(funkier.arityOf(funkier.curry)).to.equal(1);
      });


      it('curry is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.curry)).to.equal(true);
      });
    });


    describe('curryWithArity', function() {
      it('curryWithArity exists', function() {
        expect(funkier).to.have.a.property('curryWithArity');
      });


      it('funkierJS\'s curryWithArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.curryWithArity).to.equal(module.curryWithArity);
      });


      it('curryWithArity is a function', function() {
        expect(funkier.curryWithArity).to.be.a('function');
      });


      it('curryWithArity has documented arity', function() {
        expect(funkier.arityOf(funkier.curryWithArity)).to.equal(2);
      });


      it('curryWithArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.curryWithArity)).to.equal(true);
      });
    });


    describe('deepEqual', function() {
      it('deepEqual exists', function() {
        expect(funkier).to.have.a.property('deepEqual');
      });


      it('funkierJS\'s deepEqual is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.deepEqual).to.equal(module.deepEqual);
      });


      it('deepEqual is a function', function() {
        expect(funkier.deepEqual).to.be.a('function');
      });


      it('deepEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.deepEqual)).to.equal(2);
      });


      it('deepEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.deepEqual)).to.equal(true);
      });
    });


    describe('deepEquals', function() {
      it('deepEquals exists', function() {
        expect(funkier).to.have.a.property('deepEquals');
      });


      it('deepEquals is a synonym for deepEqual', function() {
        expect(funkier.deepEquals).to.equal(funkier.deepEqual);
      });
    });


    describe('div', function() {
      it('div exists', function() {
        expect(funkier).to.have.a.property('div');
      });


      it('funkierJS\'s div is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.div).to.equal(module.div);
      });


      it('div is a function', function() {
        expect(funkier.div).to.be.a('function');
      });


      it('div has documented arity', function() {
        expect(funkier.arityOf(funkier.div)).to.equal(2);
      });


      it('div is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.div)).to.equal(true);
      });
    });


    describe('divide', function() {
      it('divide exists', function() {
        expect(funkier).to.have.a.property('divide');
      });


      it('funkierJS\'s divide is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.divide).to.equal(module.divide);
      });


      it('divide is a function', function() {
        expect(funkier.divide).to.be.a('function');
      });


      it('divide has documented arity', function() {
        expect(funkier.arityOf(funkier.divide)).to.equal(2);
      });


      it('divide is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.divide)).to.equal(true);
      });
    });


    describe('either', function() {
      it('either exists', function() {
        expect(funkier).to.have.a.property('either');
      });


      it('funkierJS\'s either is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.either).to.equal(module.either);
      });


      it('either is a function', function() {
        expect(funkier.either).to.be.a('function');
      });


      it('either has documented arity', function() {
        expect(funkier.arityOf(funkier.either)).to.equal(3);
      });


      it('either is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.either)).to.equal(true);
      });
    });


    describe('equals', function() {
      it('equals exists', function() {
        expect(funkier).to.have.a.property('equals');
      });


      it('funkierJS\'s equals is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.equals).to.equal(module.equals);
      });


      it('equals is a function', function() {
        expect(funkier.equals).to.be.a('function');
      });


      it('equals has documented arity', function() {
        expect(funkier.arityOf(funkier.equals)).to.equal(2);
      });


      it('equals is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.equals)).to.equal(true);
      });
    });


    describe('even', function() {
      it('even exists', function() {
        expect(funkier).to.have.a.property('even');
      });


      it('funkierJS\'s even is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.even).to.equal(module.even);
      });


      it('even is a function', function() {
        expect(funkier.even).to.be.a('function');
      });


      it('even has documented arity', function() {
        expect(funkier.arityOf(funkier.even)).to.equal(1);
      });


      it('even is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.even)).to.equal(true);
      });
    });


    describe('exp', function() {
      it('exp exists', function() {
        expect(funkier).to.have.a.property('exp');
      });


      it('funkierJS\'s exp is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.exp).to.equal(module.exp);
      });


      it('exp is a function', function() {
        expect(funkier.exp).to.be.a('function');
      });


      it('exp has documented arity', function() {
        expect(funkier.arityOf(funkier.exp)).to.equal(2);
      });


      it('exp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.exp)).to.equal(true);
      });
    });


    describe('first', function() {
      it('first exists', function() {
        expect(funkier).to.have.a.property('first');
      });


      it('first is a synonym for fst', function() {
        expect(funkier.first).to.equal(funkier.fst);
      });
    });


    describe('flip', function() {
      it('flip exists', function() {
        expect(funkier).to.have.a.property('flip');
      });


      it('funkierJS\'s flip is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.flip).to.equal(module.flip);
      });


      it('flip is a function', function() {
        expect(funkier.flip).to.be.a('function');
      });


      it('flip has documented arity', function() {
        expect(funkier.arityOf(funkier.flip)).to.equal(1);
      });


      it('flip is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.flip)).to.equal(true);
      });
    });


    describe('fst', function() {
      it('fst exists', function() {
        expect(funkier).to.have.a.property('fst');
      });


      it('funkierJS\'s fst is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.fst).to.equal(module.fst);
      });


      it('fst is a function', function() {
        expect(funkier.fst).to.be.a('function');
      });


      it('fst has documented arity', function() {
        expect(funkier.arityOf(funkier.fst)).to.equal(1);
      });


      it('fst is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.fst)).to.equal(true);
      });
    });


    describe('getErrValue', function() {
      it('getErrValue exists', function() {
        expect(funkier).to.have.a.property('getErrValue');
      });


      it('funkierJS\'s getErrValue is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.getErrValue).to.equal(module.getErrValue);
      });


      it('getErrValue is a function', function() {
        expect(funkier.getErrValue).to.be.a('function');
      });


      it('getErrValue has documented arity', function() {
        expect(funkier.arityOf(funkier.getErrValue)).to.equal(1);
      });


      it('getErrValue is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getErrValue)).to.equal(true);
      });
    });


    describe('getJustValue', function() {
      it('getJustValue exists', function() {
        expect(funkier).to.have.a.property('getJustValue');
      });


      it('funkierJS\'s getJustValue is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.getJustValue).to.equal(module.getJustValue);
      });


      it('getJustValue is a function', function() {
        expect(funkier.getJustValue).to.be.a('function');
      });


      it('getJustValue has documented arity', function() {
        expect(funkier.arityOf(funkier.getJustValue)).to.equal(1);
      });


      it('getJustValue is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getJustValue)).to.equal(true);
      });
    });


    describe('getOkValue', function() {
      it('getOkValue exists', function() {
        expect(funkier).to.have.a.property('getOkValue');
      });


      it('funkierJS\'s getOkValue is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.getOkValue).to.equal(module.getOkValue);
      });


      it('getOkValue is a function', function() {
        expect(funkier.getOkValue).to.be.a('function');
      });


      it('getOkValue has documented arity', function() {
        expect(funkier.arityOf(funkier.getOkValue)).to.equal(1);
      });


      it('getOkValue is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getOkValue)).to.equal(true);
      });
    });


    describe('getType', function() {
      it('getType exists', function() {
        expect(funkier).to.have.a.property('getType');
      });


      it('funkierJS\'s getType is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.getType).to.equal(module.getType);
      });


      it('getType is a function', function() {
        expect(funkier.getType).to.be.a('function');
      });


      it('getType has documented arity', function() {
        expect(funkier.arityOf(funkier.getType)).to.equal(1);
      });


      it('getType is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getType)).to.equal(true);
      });
    });


    describe('greaterThan', function() {
      it('greaterThan exists', function() {
        expect(funkier).to.have.a.property('greaterThan');
      });


      it('funkierJS\'s greaterThan is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.greaterThan).to.equal(module.greaterThan);
      });


      it('greaterThan is a function', function() {
        expect(funkier.greaterThan).to.be.a('function');
      });


      it('greaterThan has documented arity', function() {
        expect(funkier.arityOf(funkier.greaterThan)).to.equal(2);
      });


      it('greaterThan is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.greaterThan)).to.equal(true);
      });
    });


    describe('greaterThanEqual', function() {
      it('greaterThanEqual exists', function() {
        expect(funkier).to.have.a.property('greaterThanEqual');
      });


      it('funkierJS\'s greaterThanEqual is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.greaterThanEqual).to.equal(module.greaterThanEqual);
      });


      it('greaterThanEqual is a function', function() {
        expect(funkier.greaterThanEqual).to.be.a('function');
      });


      it('greaterThanEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.greaterThanEqual)).to.equal(2);
      });


      it('greaterThanEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.greaterThanEqual)).to.equal(true);
      });
    });


    describe('gt', function() {
      it('gt exists', function() {
        expect(funkier).to.have.a.property('gt');
      });


      it('gt is a synonym for greaterThan', function() {
        expect(funkier.gt).to.equal(funkier.greaterThan);
      });
    });


    describe('gte', function() {
      it('gte exists', function() {
        expect(funkier).to.have.a.property('gte');
      });


      it('gte is a synonym for greaterThanEqual', function() {
        expect(funkier.gte).to.equal(funkier.greaterThanEqual);
      });
    });


    describe('hasType', function() {
      it('hasType exists', function() {
        expect(funkier).to.have.a.property('hasType');
      });


      it('hasType is a synonym for is', function() {
        expect(funkier.hasType).to.equal(funkier.is);
      });
    });


    describe('id', function() {
      it('id exists', function() {
        expect(funkier).to.have.a.property('id');
      });


      it('funkierJS\'s id is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.id).to.equal(module.id);
      });


      it('id is a function', function() {
        expect(funkier.id).to.be.a('function');
      });


      it('id has documented arity', function() {
        expect(funkier.arityOf(funkier.id)).to.equal(1);
      });


      it('id is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.id)).to.equal(true);
      });
    });


    describe('is', function() {
      it('is exists', function() {
        expect(funkier).to.have.a.property('is');
      });


      it('funkierJS\'s is is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.is).to.equal(module.is);
      });


      it('is is a function', function() {
        expect(funkier.is).to.be.a('function');
      });


      it('is has documented arity', function() {
        expect(funkier.arityOf(funkier.is)).to.equal(2);
      });


      it('is is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.is)).to.equal(true);
      });
    });


    describe('isArray', function() {
      it('isArray exists', function() {
        expect(funkier).to.have.a.property('isArray');
      });


      it('funkierJS\'s isArray is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isArray).to.equal(module.isArray);
      });


      it('isArray is a function', function() {
        expect(funkier.isArray).to.be.a('function');
      });


      it('isArray has documented arity', function() {
        expect(funkier.arityOf(funkier.isArray)).to.equal(1);
      });


      it('isArray is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isArray)).to.equal(true);
      });
    });


    describe('isBoolean', function() {
      it('isBoolean exists', function() {
        expect(funkier).to.have.a.property('isBoolean');
      });


      it('funkierJS\'s isBoolean is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isBoolean).to.equal(module.isBoolean);
      });


      it('isBoolean is a function', function() {
        expect(funkier.isBoolean).to.be.a('function');
      });


      it('isBoolean has documented arity', function() {
        expect(funkier.arityOf(funkier.isBoolean)).to.equal(1);
      });


      it('isBoolean is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isBoolean)).to.equal(true);
      });
    });


    describe('isErr', function() {
      it('isErr exists', function() {
        expect(funkier).to.have.a.property('isErr');
      });


      it('funkierJS\'s isErr is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.isErr).to.equal(module.isErr);
      });


      it('isErr is a function', function() {
        expect(funkier.isErr).to.be.a('function');
      });


      it('isErr has documented arity', function() {
        expect(funkier.arityOf(funkier.isErr)).to.equal(1);
      });


      it('isErr is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isErr)).to.equal(true);
      });
    });


    describe('isJust', function() {
      it('isJust exists', function() {
        expect(funkier).to.have.a.property('isJust');
      });


      it('funkierJS\'s isJust is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.isJust).to.equal(module.isJust);
      });


      it('isJust is a function', function() {
        expect(funkier.isJust).to.be.a('function');
      });


      it('isJust has documented arity', function() {
        expect(funkier.arityOf(funkier.isJust)).to.equal(1);
      });


      it('isJust is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isJust)).to.equal(true);
      });
    });


    describe('isMaybe', function() {
      it('isMaybe exists', function() {
        expect(funkier).to.have.a.property('isMaybe');
      });


      it('funkierJS\'s isMaybe is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.isMaybe).to.equal(module.isMaybe);
      });


      it('isMaybe is a function', function() {
        expect(funkier.isMaybe).to.be.a('function');
      });


      it('isMaybe has documented arity', function() {
        expect(funkier.arityOf(funkier.isMaybe)).to.equal(1);
      });


      it('isMaybe is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isMaybe)).to.equal(true);
      });
    });


    describe('isNothing', function() {
      it('isNothing exists', function() {
        expect(funkier).to.have.a.property('isNothing');
      });


      it('funkierJS\'s isNothing is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.isNothing).to.equal(module.isNothing);
      });


      it('isNothing is a function', function() {
        expect(funkier.isNothing).to.be.a('function');
      });


      it('isNothing has documented arity', function() {
        expect(funkier.arityOf(funkier.isNothing)).to.equal(1);
      });


      it('isNothing is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isNothing)).to.equal(true);
      });
    });


    describe('isNull', function() {
      it('isNull exists', function() {
        expect(funkier).to.have.a.property('isNull');
      });


      it('funkierJS\'s isNull is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isNull).to.equal(module.isNull);
      });


      it('isNull is a function', function() {
        expect(funkier.isNull).to.be.a('function');
      });


      it('isNull has documented arity', function() {
        expect(funkier.arityOf(funkier.isNull)).to.equal(1);
      });


      it('isNull is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isNull)).to.equal(true);
      });
    });


    describe('isNumber', function() {
      it('isNumber exists', function() {
        expect(funkier).to.have.a.property('isNumber');
      });


      it('funkierJS\'s isNumber is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isNumber).to.equal(module.isNumber);
      });


      it('isNumber is a function', function() {
        expect(funkier.isNumber).to.be.a('function');
      });


      it('isNumber has documented arity', function() {
        expect(funkier.arityOf(funkier.isNumber)).to.equal(1);
      });


      it('isNumber is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isNumber)).to.equal(true);
      });
    });


    describe('isObject', function() {
      it('isObject exists', function() {
        expect(funkier).to.have.a.property('isObject');
      });


      it('funkierJS\'s isObject is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isObject).to.equal(module.isObject);
      });


      it('isObject is a function', function() {
        expect(funkier.isObject).to.be.a('function');
      });


      it('isObject has documented arity', function() {
        expect(funkier.arityOf(funkier.isObject)).to.equal(1);
      });


      it('isObject is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isObject)).to.equal(true);
      });
    });


    describe('isOk', function() {
      it('isOk exists', function() {
        expect(funkier).to.have.a.property('isOk');
      });


      it('funkierJS\'s isOk is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.isOk).to.equal(module.isOk);
      });


      it('isOk is a function', function() {
        expect(funkier.isOk).to.be.a('function');
      });


      it('isOk has documented arity', function() {
        expect(funkier.arityOf(funkier.isOk)).to.equal(1);
      });


      it('isOk is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isOk)).to.equal(true);
      });
    });


    describe('isPair', function() {
      it('isPair exists', function() {
        expect(funkier).to.have.a.property('isPair');
      });


      it('funkierJS\'s isPair is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.isPair).to.equal(module.isPair);
      });


      it('isPair is a function', function() {
        expect(funkier.isPair).to.be.a('function');
      });


      it('isPair has documented arity', function() {
        expect(funkier.arityOf(funkier.isPair)).to.equal(1);
      });


      it('isPair is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isPair)).to.equal(true);
      });
    });


    describe('isRealObject', function() {
      it('isRealObject exists', function() {
        expect(funkier).to.have.a.property('isRealObject');
      });


      it('funkierJS\'s isRealObject is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isRealObject).to.equal(module.isRealObject);
      });


      it('isRealObject is a function', function() {
        expect(funkier.isRealObject).to.be.a('function');
      });


      it('isRealObject has documented arity', function() {
        expect(funkier.arityOf(funkier.isRealObject)).to.equal(1);
      });


      it('isRealObject is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isRealObject)).to.equal(true);
      });
    });


    describe('isResult', function() {
      it('isResult exists', function() {
        expect(funkier).to.have.a.property('isResult');
      });


      it('funkierJS\'s isResult is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.isResult).to.equal(module.isResult);
      });


      it('isResult is a function', function() {
        expect(funkier.isResult).to.be.a('function');
      });


      it('isResult has documented arity', function() {
        expect(funkier.arityOf(funkier.isResult)).to.equal(1);
      });


      it('isResult is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isResult)).to.equal(true);
      });
    });


    describe('isString', function() {
      it('isString exists', function() {
        expect(funkier).to.have.a.property('isString');
      });


      it('funkierJS\'s isString is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isString).to.equal(module.isString);
      });


      it('isString is a function', function() {
        expect(funkier.isString).to.be.a('function');
      });


      it('isString has documented arity', function() {
        expect(funkier.arityOf(funkier.isString)).to.equal(1);
      });


      it('isString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isString)).to.equal(true);
      });
    });


    describe('isUndefined', function() {
      it('isUndefined exists', function() {
        expect(funkier).to.have.a.property('isUndefined');
      });


      it('funkierJS\'s isUndefined is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isUndefined).to.equal(module.isUndefined);
      });


      it('isUndefined is a function', function() {
        expect(funkier.isUndefined).to.be.a('function');
      });


      it('isUndefined has documented arity', function() {
        expect(funkier.arityOf(funkier.isUndefined)).to.equal(1);
      });


      it('isUndefined is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isUndefined)).to.equal(true);
      });
    });


    describe('leftShift', function() {
      it('leftShift exists', function() {
        expect(funkier).to.have.a.property('leftShift');
      });


      it('funkierJS\'s leftShift is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.leftShift).to.equal(module.leftShift);
      });


      it('leftShift is a function', function() {
        expect(funkier.leftShift).to.be.a('function');
      });


      it('leftShift has documented arity', function() {
        expect(funkier.arityOf(funkier.leftShift)).to.equal(2);
      });


      it('leftShift is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.leftShift)).to.equal(true);
      });
    });


    describe('lessThan', function() {
      it('lessThan exists', function() {
        expect(funkier).to.have.a.property('lessThan');
      });


      it('funkierJS\'s lessThan is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.lessThan).to.equal(module.lessThan);
      });


      it('lessThan is a function', function() {
        expect(funkier.lessThan).to.be.a('function');
      });


      it('lessThan has documented arity', function() {
        expect(funkier.arityOf(funkier.lessThan)).to.equal(2);
      });


      it('lessThan is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.lessThan)).to.equal(true);
      });
    });


    describe('lessThanEqual', function() {
      it('lessThanEqual exists', function() {
        expect(funkier).to.have.a.property('lessThanEqual');
      });


      it('funkierJS\'s lessThanEqual is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.lessThanEqual).to.equal(module.lessThanEqual);
      });


      it('lessThanEqual is a function', function() {
        expect(funkier.lessThanEqual).to.be.a('function');
      });


      it('lessThanEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.lessThanEqual)).to.equal(2);
      });


      it('lessThanEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.lessThanEqual)).to.equal(true);
      });
    });


    describe('log', function() {
      it('log exists', function() {
        expect(funkier).to.have.a.property('log');
      });


      it('funkierJS\'s log is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.log).to.equal(module.log);
      });


      it('log is a function', function() {
        expect(funkier.log).to.be.a('function');
      });


      it('log has documented arity', function() {
        expect(funkier.arityOf(funkier.log)).to.equal(2);
      });


      it('log is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.log)).to.equal(true);
      });
    });


    describe('lt', function() {
      it('lt exists', function() {
        expect(funkier).to.have.a.property('lt');
      });


      it('lt is a synonym for lessThan', function() {
        expect(funkier.lt).to.equal(funkier.lessThan);
      });
    });


    describe('lte', function() {
      it('lte exists', function() {
        expect(funkier).to.have.a.property('lte');
      });


      it('lte is a synonym for lessThanEqual', function() {
        expect(funkier.lte).to.equal(funkier.lessThanEqual);
      });
    });


    describe('makeMaybeReturner', function() {
      it('makeMaybeReturner exists', function() {
        expect(funkier).to.have.a.property('makeMaybeReturner');
      });


      it('funkierJS\'s makeMaybeReturner is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.makeMaybeReturner).to.equal(module.makeMaybeReturner);
      });


      it('makeMaybeReturner is a function', function() {
        expect(funkier.makeMaybeReturner).to.be.a('function');
      });


      it('makeMaybeReturner has documented arity', function() {
        expect(funkier.arityOf(funkier.makeMaybeReturner)).to.equal(1);
      });


      it('makeMaybeReturner is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeMaybeReturner)).to.equal(true);
      });
    });


    describe('makeResultReturner', function() {
      it('makeResultReturner exists', function() {
        expect(funkier).to.have.a.property('makeResultReturner');
      });


      it('funkierJS\'s makeResultReturner is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.makeResultReturner).to.equal(module.makeResultReturner);
      });


      it('makeResultReturner is a function', function() {
        expect(funkier.makeResultReturner).to.be.a('function');
      });


      it('makeResultReturner has documented arity', function() {
        expect(funkier.arityOf(funkier.makeResultReturner)).to.equal(1);
      });


      it('makeResultReturner is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeResultReturner)).to.equal(true);
      });
    });


    describe('max', function() {
      it('max exists', function() {
        expect(funkier).to.have.a.property('max');
      });


      it('funkierJS\'s max is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.max).to.equal(module.max);
      });


      it('max is a function', function() {
        expect(funkier.max).to.be.a('function');
      });


      it('max has documented arity', function() {
        expect(funkier.arityOf(funkier.max)).to.equal(2);
      });


      it('max is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.max)).to.equal(true);
      });
    });


    describe('min', function() {
      it('min exists', function() {
        expect(funkier).to.have.a.property('min');
      });


      it('funkierJS\'s min is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.min).to.equal(module.min);
      });


      it('min is a function', function() {
        expect(funkier.min).to.be.a('function');
      });


      it('min has documented arity', function() {
        expect(funkier.arityOf(funkier.min)).to.equal(2);
      });


      it('min is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.min)).to.equal(true);
      });
    });


    describe('multiply', function() {
      it('multiply exists', function() {
        expect(funkier).to.have.a.property('multiply');
      });


      it('funkierJS\'s multiply is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.multiply).to.equal(module.multiply);
      });


      it('multiply is a function', function() {
        expect(funkier.multiply).to.be.a('function');
      });


      it('multiply has documented arity', function() {
        expect(funkier.arityOf(funkier.multiply)).to.equal(2);
      });


      it('multiply is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.multiply)).to.equal(true);
      });
    });


    describe('not', function() {
      it('not exists', function() {
        expect(funkier).to.have.a.property('not');
      });


      it('funkierJS\'s not is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.not).to.equal(module.not);
      });


      it('not is a function', function() {
        expect(funkier.not).to.be.a('function');
      });


      it('not has documented arity', function() {
        expect(funkier.arityOf(funkier.not)).to.equal(1);
      });


      it('not is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.not)).to.equal(true);
      });
    });


    describe('notEqual', function() {
      it('notEqual exists', function() {
        expect(funkier).to.have.a.property('notEqual');
      });


      it('funkierJS\'s notEqual is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.notEqual).to.equal(module.notEqual);
      });


      it('notEqual is a function', function() {
        expect(funkier.notEqual).to.be.a('function');
      });


      it('notEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.notEqual)).to.equal(2);
      });


      it('notEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.notEqual)).to.equal(true);
      });
    });


    describe('notEquals', function() {
      it('notEquals exists', function() {
        expect(funkier).to.have.a.property('notEquals');
      });


      it('notEquals is a synonym for notEqual', function() {
        expect(funkier.notEquals).to.equal(funkier.notEqual);
      });
    });


    describe('notPred', function() {
      it('notPred exists', function() {
        expect(funkier).to.have.a.property('notPred');
      });


      it('funkierJS\'s notPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.notPred).to.equal(module.notPred);
      });


      it('notPred is a function', function() {
        expect(funkier.notPred).to.be.a('function');
      });


      it('notPred has documented arity', function() {
        expect(funkier.arityOf(funkier.notPred)).to.equal(1);
      });


      it('notPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.notPred)).to.equal(true);
      });
    });


    describe('objectCurry', function() {
      it('objectCurry exists', function() {
        expect(funkier).to.have.a.property('objectCurry');
      });


      it('funkierJS\'s objectCurry is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.objectCurry).to.equal(module.objectCurry);
      });


      it('objectCurry is a function', function() {
        expect(funkier.objectCurry).to.be.a('function');
      });


      it('objectCurry has documented arity', function() {
        expect(funkier.arityOf(funkier.objectCurry)).to.equal(1);
      });


      it('objectCurry is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.objectCurry)).to.equal(true);
      });
    });


    describe('objectCurryWithArity', function() {
      it('objectCurryWithArity exists', function() {
        expect(funkier).to.have.a.property('objectCurryWithArity');
      });


      it('funkierJS\'s objectCurryWithArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.objectCurryWithArity).to.equal(module.objectCurryWithArity);
      });


      it('objectCurryWithArity is a function', function() {
        expect(funkier.objectCurryWithArity).to.be.a('function');
      });


      it('objectCurryWithArity has documented arity', function() {
        expect(funkier.arityOf(funkier.objectCurryWithArity)).to.equal(2);
      });


      it('objectCurryWithArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.objectCurryWithArity)).to.equal(true);
      });
    });


    describe('odd', function() {
      it('odd exists', function() {
        expect(funkier).to.have.a.property('odd');
      });


      it('funkierJS\'s odd is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.odd).to.equal(module.odd);
      });


      it('odd is a function', function() {
        expect(funkier.odd).to.be.a('function');
      });


      it('odd has documented arity', function() {
        expect(funkier.arityOf(funkier.odd)).to.equal(1);
      });


      it('odd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.odd)).to.equal(true);
      });
    });


    describe('or', function() {
      it('or exists', function() {
        expect(funkier).to.have.a.property('or');
      });


      it('funkierJS\'s or is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.or).to.equal(module.or);
      });


      it('or is a function', function() {
        expect(funkier.or).to.be.a('function');
      });


      it('or has documented arity', function() {
        expect(funkier.arityOf(funkier.or)).to.equal(2);
      });


      it('or is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.or)).to.equal(true);
      });
    });


    describe('orPred', function() {
      it('orPred exists', function() {
        expect(funkier).to.have.a.property('orPred');
      });


      it('funkierJS\'s orPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.orPred).to.equal(module.orPred);
      });


      it('orPred is a function', function() {
        expect(funkier.orPred).to.be.a('function');
      });


      it('orPred has documented arity', function() {
        expect(funkier.arityOf(funkier.orPred)).to.equal(2);
      });


      it('orPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.orPred)).to.equal(true);
      });
    });


    describe('plus', function() {
      it('plus exists', function() {
        expect(funkier).to.have.a.property('plus');
      });


      it('plus is a synonym for add', function() {
        expect(funkier.plus).to.equal(funkier.add);
      });
    });


    describe('pow', function() {
      it('pow exists', function() {
        expect(funkier).to.have.a.property('pow');
      });


      it('pow is a synonym for exp', function() {
        expect(funkier.pow).to.equal(funkier.exp);
      });
    });


    describe('rem', function() {
      it('rem exists', function() {
        expect(funkier).to.have.a.property('rem');
      });


      it('funkierJS\'s rem is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rem).to.equal(module.rem);
      });


      it('rem is a function', function() {
        expect(funkier.rem).to.be.a('function');
      });


      it('rem has documented arity', function() {
        expect(funkier.arityOf(funkier.rem)).to.equal(2);
      });


      it('rem is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rem)).to.equal(true);
      });
    });


    describe('rightShift', function() {
      it('rightShift exists', function() {
        expect(funkier).to.have.a.property('rightShift');
      });


      it('funkierJS\'s rightShift is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rightShift).to.equal(module.rightShift);
      });


      it('rightShift is a function', function() {
        expect(funkier.rightShift).to.be.a('function');
      });


      it('rightShift has documented arity', function() {
        expect(funkier.arityOf(funkier.rightShift)).to.equal(2);
      });


      it('rightShift is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rightShift)).to.equal(true);
      });
    });


    describe('rightShiftZero', function() {
      it('rightShiftZero exists', function() {
        expect(funkier).to.have.a.property('rightShiftZero');
      });


      it('funkierJS\'s rightShiftZero is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rightShiftZero).to.equal(module.rightShiftZero);
      });


      it('rightShiftZero is a function', function() {
        expect(funkier.rightShiftZero).to.be.a('function');
      });


      it('rightShiftZero has documented arity', function() {
        expect(funkier.arityOf(funkier.rightShiftZero)).to.equal(2);
      });


      it('rightShiftZero is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rightShiftZero)).to.equal(true);
      });
    });


    describe('second', function() {
      it('second exists', function() {
        expect(funkier).to.have.a.property('second');
      });


      it('second is a synonym for snd', function() {
        expect(funkier.second).to.equal(funkier.snd);
      });
    });


    describe('sectionLeft', function() {
      it('sectionLeft exists', function() {
        expect(funkier).to.have.a.property('sectionLeft');
      });


      it('funkierJS\'s sectionLeft is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.sectionLeft).to.equal(module.sectionLeft);
      });


      it('sectionLeft is a function', function() {
        expect(funkier.sectionLeft).to.be.a('function');
      });


      it('sectionLeft has documented arity', function() {
        expect(funkier.arityOf(funkier.sectionLeft)).to.equal(2);
      });


      it('sectionLeft is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.sectionLeft)).to.equal(true);
      });
    });


    describe('sectionRight', function() {
      it('sectionRight exists', function() {
        expect(funkier).to.have.a.property('sectionRight');
      });


      it('funkierJS\'s sectionRight is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.sectionRight).to.equal(module.sectionRight);
      });


      it('sectionRight is a function', function() {
        expect(funkier.sectionRight).to.be.a('function');
      });


      it('sectionRight has documented arity', function() {
        expect(funkier.arityOf(funkier.sectionRight)).to.equal(2);
      });


      it('sectionRight is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.sectionRight)).to.equal(true);
      });
    });


    describe('snd', function() {
      it('snd exists', function() {
        expect(funkier).to.have.a.property('snd');
      });


      it('funkierJS\'s snd is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.snd).to.equal(module.snd);
      });


      it('snd is a function', function() {
        expect(funkier.snd).to.be.a('function');
      });


      it('snd has documented arity', function() {
        expect(funkier.arityOf(funkier.snd)).to.equal(1);
      });


      it('snd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.snd)).to.equal(true);
      });
    });


    describe('strictEquals', function() {
      it('strictEquals exists', function() {
        expect(funkier).to.have.a.property('strictEquals');
      });


      it('funkierJS\'s strictEquals is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.strictEquals).to.equal(module.strictEquals);
      });


      it('strictEquals is a function', function() {
        expect(funkier.strictEquals).to.be.a('function');
      });


      it('strictEquals has documented arity', function() {
        expect(funkier.arityOf(funkier.strictEquals)).to.equal(2);
      });


      it('strictEquals is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.strictEquals)).to.equal(true);
      });
    });


    describe('strictInequality', function() {
      it('strictInequality exists', function() {
        expect(funkier).to.have.a.property('strictInequality');
      });


      it('strictInequality is a synonym for strictNotEqual', function() {
        expect(funkier.strictInequality).to.equal(funkier.strictNotEqual);
      });
    });


    describe('strictNotEqual', function() {
      it('strictNotEqual exists', function() {
        expect(funkier).to.have.a.property('strictNotEqual');
      });


      it('funkierJS\'s strictNotEqual is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.strictNotEqual).to.equal(module.strictNotEqual);
      });


      it('strictNotEqual is a function', function() {
        expect(funkier.strictNotEqual).to.be.a('function');
      });


      it('strictNotEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.strictNotEqual)).to.equal(2);
      });


      it('strictNotEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.strictNotEqual)).to.equal(true);
      });
    });


    describe('strictNotEquals', function() {
      it('strictNotEquals exists', function() {
        expect(funkier).to.have.a.property('strictNotEquals');
      });


      it('strictNotEquals is a synonym for strictNotEqual', function() {
        expect(funkier.strictNotEquals).to.equal(funkier.strictNotEqual);
      });
    });


    describe('subtract', function() {
      it('subtract exists', function() {
        expect(funkier).to.have.a.property('subtract');
      });


      it('funkierJS\'s subtract is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.subtract).to.equal(module.subtract);
      });


      it('subtract is a function', function() {
        expect(funkier.subtract).to.be.a('function');
      });


      it('subtract has documented arity', function() {
        expect(funkier.arityOf(funkier.subtract)).to.equal(2);
      });


      it('subtract is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.subtract)).to.equal(true);
      });
    });


    describe('xor', function() {
      it('xor exists', function() {
        expect(funkier).to.have.a.property('xor');
      });


      it('funkierJS\'s xor is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.xor).to.equal(module.xor);
      });


      it('xor is a function', function() {
        expect(funkier.xor).to.be.a('function');
      });


      it('xor has documented arity', function() {
        expect(funkier.arityOf(funkier.xor)).to.equal(2);
      });


      it('xor is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.xor)).to.equal(true);
      });
    });


    describe('xorPred', function() {
      it('xorPred exists', function() {
        expect(funkier).to.have.a.property('xorPred');
      });


      it('funkierJS\'s xorPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.xorPred).to.equal(module.xorPred);
      });


      it('xorPred is a function', function() {
        expect(funkier.xorPred).to.be.a('function');
      });


      it('xorPred has documented arity', function() {
        expect(funkier.arityOf(funkier.xorPred)).to.equal(2);
      });


      it('xorPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.xorPred)).to.equal(true);
      });
    });
  });


  describe('Exported values', function() {
    var documentedNames;


    beforeEach(function() {
      documentedNames = ['help', 'Err', 'Just', 'Maybe', 'Nothing', 'Ok', 'Pair', 'Result', 'add', 'and', 'andPred',
         'arity', 'arityOf', 'asArray', 'bind', 'bindWithContext', 'bindWithContextAndArity', 'bitwiseAnd',
         'bitwiseNot', 'bitwiseOr', 'bitwiseXor', 'compose', 'composeMany', 'composeOn', 'constant', 'constant0',
         'curry', 'curryWithArity', 'deepEqual', 'deepEquals', 'div', 'divide', 'either', 'equals', 'even', 'exp',
         'first', 'flip', 'fst', 'getErrValue', 'getJustValue', 'getOkValue', 'getType', 'greaterThan',
         'greaterThanEqual', 'gt', 'gte', 'hasType', 'id', 'is', 'isArray', 'isBoolean', 'isErr', 'isJust', 'isMaybe',
         'isNothing', 'isNull', 'isNumber', 'isObject', 'isOk', 'isPair', 'isRealObject', 'isResult', 'isString',
         'isUndefined', 'leftShift', 'lessThan', 'lessThanEqual', 'log', 'lt', 'lte', 'makeMaybeReturner',
         'makeResultReturner', 'max', 'min', 'multiply', 'not', 'notEqual', 'notEquals', 'notPred', 'objectCurry',
         'objectCurryWithArity', 'odd', 'or', 'orPred', 'plus', 'pow', 'rem', 'rightShift', 'rightShiftZero', 'second',
         'sectionLeft', 'sectionRight', 'snd', 'strictEquals', 'strictInequality', 'strictNotEqual', 'strictNotEquals',
         'subtract', 'xor', 'xorPred'];
    });


    Object.keys(funkier).forEach(function(k) {
      var prop = funkier[k];
      if (k[0] === '_' || prop === null ||
          (typeof(prop) !== 'object' && typeof(prop) !== 'function'))
        return;

      it(k + ' is documented', function() {
        expect(documentedNames.indexOf(k)).to.not.equal(-1);
      });
    });
  });
})();
