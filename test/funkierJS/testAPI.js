(function() {
  "use strict";


  /* NOTE: THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY */


  var expect = require('chai').expect;
  var funkier = require('../../lib/funkier');


  describe('Documented values', function() {
    describe('add', function() {
      it('add exists', function() {
        expect(funkier).to.have.a.property('add');
      });


      it('funkierJS\'s add is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.add).to.equal(module.add);
      });


      it('add is a function', function() {
        expect(funkier.add).to.be.a('function');
      });


      it('add has documented arity', function() {
        expect(funkier.arityOf(funkier.add)).to.equal(2);
      });


      it('add is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.add)).to.equal(true);
      });
    });


    describe('and', function() {
      it('and exists', function() {
        expect(funkier).to.have.a.property('and');
      });


      it('funkierJS\'s and is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.and).to.equal(module.and);
      });


      it('and is a function', function() {
        expect(funkier.and).to.be.a('function');
      });


      it('and has documented arity', function() {
        expect(funkier.arityOf(funkier.and)).to.equal(2);
      });


      it('and is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.and)).to.equal(true);
      });
    });


    describe('arity', function() {
      it('arity exists', function() {
        expect(funkier).to.have.a.property('arity');
      });


      it('arity is a synonym for arityOf', function() {
        expect(funkier.arity).to.equal(funkier.arityOf);
      });
    });


    describe('arityOf', function() {
      it('arityOf exists', function() {
        expect(funkier).to.have.a.property('arityOf');
      });


      it('funkierJS\'s arityOf is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.arityOf).to.equal(module.arityOf);
      });


      it('arityOf is a function', function() {
        expect(funkier.arityOf).to.be.a('function');
      });


      it('arityOf has documented arity', function() {
        expect(funkier.arityOf(funkier.arityOf)).to.equal(1);
      });


      it('arityOf is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.arityOf)).to.equal(true);
      });
    });


    describe('bind', function() {
      it('bind exists', function() {
        expect(funkier).to.have.a.property('bind');
      });


      it('funkierJS\'s bind is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.bind).to.equal(module.bind);
      });


      it('bind is a function', function() {
        expect(funkier.bind).to.be.a('function');
      });


      it('bind has documented arity', function() {
        expect(funkier.arityOf(funkier.bind)).to.equal(2);
      });


      it('bind is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bind)).to.equal(true);
      });
    });


    describe('bindWithContext', function() {
      it('bindWithContext exists', function() {
        expect(funkier).to.have.a.property('bindWithContext');
      });


      it('bindWithContext is a synonym for bind', function() {
        expect(funkier.bindWithContext).to.equal(funkier.bind);
      });
    });


    describe('bindWithContextAndArity', function() {
      it('bindWithContextAndArity exists', function() {
        expect(funkier).to.have.a.property('bindWithContextAndArity');
      });


      it('funkierJS\'s bindWithContextAndArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.bindWithContextAndArity).to.equal(module.bindWithContextAndArity);
      });


      it('bindWithContextAndArity is a function', function() {
        expect(funkier.bindWithContextAndArity).to.be.a('function');
      });


      it('bindWithContextAndArity has documented arity', function() {
        expect(funkier.arityOf(funkier.bindWithContextAndArity)).to.equal(3);
      });


      it('bindWithContextAndArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bindWithContextAndArity)).to.equal(true);
      });
    });


    describe('bitwiseAnd', function() {
      it('bitwiseAnd exists', function() {
        expect(funkier).to.have.a.property('bitwiseAnd');
      });


      it('funkierJS\'s bitwiseAnd is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseAnd).to.equal(module.bitwiseAnd);
      });


      it('bitwiseAnd is a function', function() {
        expect(funkier.bitwiseAnd).to.be.a('function');
      });


      it('bitwiseAnd has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseAnd)).to.equal(2);
      });


      it('bitwiseAnd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseAnd)).to.equal(true);
      });
    });


    describe('bitwiseNot', function() {
      it('bitwiseNot exists', function() {
        expect(funkier).to.have.a.property('bitwiseNot');
      });


      it('funkierJS\'s bitwiseNot is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseNot).to.equal(module.bitwiseNot);
      });


      it('bitwiseNot is a function', function() {
        expect(funkier.bitwiseNot).to.be.a('function');
      });


      it('bitwiseNot has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseNot)).to.equal(1);
      });


      it('bitwiseNot is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseNot)).to.equal(true);
      });
    });


    describe('bitwiseOr', function() {
      it('bitwiseOr exists', function() {
        expect(funkier).to.have.a.property('bitwiseOr');
      });


      it('funkierJS\'s bitwiseOr is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseOr).to.equal(module.bitwiseOr);
      });


      it('bitwiseOr is a function', function() {
        expect(funkier.bitwiseOr).to.be.a('function');
      });


      it('bitwiseOr has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseOr)).to.equal(2);
      });


      it('bitwiseOr is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseOr)).to.equal(true);
      });
    });


    describe('bitwiseXor', function() {
      it('bitwiseXor exists', function() {
        expect(funkier).to.have.a.property('bitwiseXor');
      });


      it('funkierJS\'s bitwiseXor is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseXor).to.equal(module.bitwiseXor);
      });


      it('bitwiseXor is a function', function() {
        expect(funkier.bitwiseXor).to.be.a('function');
      });


      it('bitwiseXor has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseXor)).to.equal(2);
      });


      it('bitwiseXor is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseXor)).to.equal(true);
      });
    });


    describe('curry', function() {
      it('curry exists', function() {
        expect(funkier).to.have.a.property('curry');
      });


      it('funkierJS\'s curry is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.curry).to.equal(module.curry);
      });


      it('curry is a function', function() {
        expect(funkier.curry).to.be.a('function');
      });


      it('curry has documented arity', function() {
        expect(funkier.arityOf(funkier.curry)).to.equal(1);
      });


      it('curry is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.curry)).to.equal(true);
      });
    });


    describe('curryWithArity', function() {
      it('curryWithArity exists', function() {
        expect(funkier).to.have.a.property('curryWithArity');
      });


      it('funkierJS\'s curryWithArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.curryWithArity).to.equal(module.curryWithArity);
      });


      it('curryWithArity is a function', function() {
        expect(funkier.curryWithArity).to.be.a('function');
      });


      it('curryWithArity has documented arity', function() {
        expect(funkier.arityOf(funkier.curryWithArity)).to.equal(2);
      });


      it('curryWithArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.curryWithArity)).to.equal(true);
      });
    });


    describe('div', function() {
      it('div exists', function() {
        expect(funkier).to.have.a.property('div');
      });


      it('funkierJS\'s div is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.div).to.equal(module.div);
      });


      it('div is a function', function() {
        expect(funkier.div).to.be.a('function');
      });


      it('div has documented arity', function() {
        expect(funkier.arityOf(funkier.div)).to.equal(2);
      });


      it('div is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.div)).to.equal(true);
      });
    });


    describe('divide', function() {
      it('divide exists', function() {
        expect(funkier).to.have.a.property('divide');
      });


      it('funkierJS\'s divide is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.divide).to.equal(module.divide);
      });


      it('divide is a function', function() {
        expect(funkier.divide).to.be.a('function');
      });


      it('divide has documented arity', function() {
        expect(funkier.arityOf(funkier.divide)).to.equal(2);
      });


      it('divide is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.divide)).to.equal(true);
      });
    });


    describe('even', function() {
      it('even exists', function() {
        expect(funkier).to.have.a.property('even');
      });


      it('funkierJS\'s even is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.even).to.equal(module.even);
      });


      it('even is a function', function() {
        expect(funkier.even).to.be.a('function');
      });


      it('even has documented arity', function() {
        expect(funkier.arityOf(funkier.even)).to.equal(1);
      });


      it('even is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.even)).to.equal(true);
      });
    });


    describe('exp', function() {
      it('exp exists', function() {
        expect(funkier).to.have.a.property('exp');
      });


      it('funkierJS\'s exp is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.exp).to.equal(module.exp);
      });


      it('exp is a function', function() {
        expect(funkier.exp).to.be.a('function');
      });


      it('exp has documented arity', function() {
        expect(funkier.arityOf(funkier.exp)).to.equal(2);
      });


      it('exp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.exp)).to.equal(true);
      });
    });


    describe('greaterThan', function() {
      it('greaterThan exists', function() {
        expect(funkier).to.have.a.property('greaterThan');
      });


      it('funkierJS\'s greaterThan is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.greaterThan).to.equal(module.greaterThan);
      });


      it('greaterThan is a function', function() {
        expect(funkier.greaterThan).to.be.a('function');
      });


      it('greaterThan has documented arity', function() {
        expect(funkier.arityOf(funkier.greaterThan)).to.equal(2);
      });


      it('greaterThan is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.greaterThan)).to.equal(true);
      });
    });


    describe('greaterThanEqual', function() {
      it('greaterThanEqual exists', function() {
        expect(funkier).to.have.a.property('greaterThanEqual');
      });


      it('funkierJS\'s greaterThanEqual is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.greaterThanEqual).to.equal(module.greaterThanEqual);
      });


      it('greaterThanEqual is a function', function() {
        expect(funkier.greaterThanEqual).to.be.a('function');
      });


      it('greaterThanEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.greaterThanEqual)).to.equal(2);
      });


      it('greaterThanEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.greaterThanEqual)).to.equal(true);
      });
    });


    describe('gt', function() {
      it('gt exists', function() {
        expect(funkier).to.have.a.property('gt');
      });


      it('gt is a synonym for greaterThan', function() {
        expect(funkier.gt).to.equal(funkier.greaterThan);
      });
    });


    describe('gte', function() {
      it('gte exists', function() {
        expect(funkier).to.have.a.property('gte');
      });


      it('gte is a synonym for greaterThanEqual', function() {
        expect(funkier.gte).to.equal(funkier.greaterThanEqual);
      });
    });


    describe('leftShift', function() {
      it('leftShift exists', function() {
        expect(funkier).to.have.a.property('leftShift');
      });


      it('funkierJS\'s leftShift is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.leftShift).to.equal(module.leftShift);
      });


      it('leftShift is a function', function() {
        expect(funkier.leftShift).to.be.a('function');
      });


      it('leftShift has documented arity', function() {
        expect(funkier.arityOf(funkier.leftShift)).to.equal(2);
      });


      it('leftShift is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.leftShift)).to.equal(true);
      });
    });


    describe('lessThan', function() {
      it('lessThan exists', function() {
        expect(funkier).to.have.a.property('lessThan');
      });


      it('funkierJS\'s lessThan is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.lessThan).to.equal(module.lessThan);
      });


      it('lessThan is a function', function() {
        expect(funkier.lessThan).to.be.a('function');
      });


      it('lessThan has documented arity', function() {
        expect(funkier.arityOf(funkier.lessThan)).to.equal(2);
      });


      it('lessThan is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.lessThan)).to.equal(true);
      });
    });


    describe('lessThanEqual', function() {
      it('lessThanEqual exists', function() {
        expect(funkier).to.have.a.property('lessThanEqual');
      });


      it('funkierJS\'s lessThanEqual is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.lessThanEqual).to.equal(module.lessThanEqual);
      });


      it('lessThanEqual is a function', function() {
        expect(funkier.lessThanEqual).to.be.a('function');
      });


      it('lessThanEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.lessThanEqual)).to.equal(2);
      });


      it('lessThanEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.lessThanEqual)).to.equal(true);
      });
    });


    describe('log', function() {
      it('log exists', function() {
        expect(funkier).to.have.a.property('log');
      });


      it('funkierJS\'s log is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.log).to.equal(module.log);
      });


      it('log is a function', function() {
        expect(funkier.log).to.be.a('function');
      });


      it('log has documented arity', function() {
        expect(funkier.arityOf(funkier.log)).to.equal(2);
      });


      it('log is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.log)).to.equal(true);
      });
    });


    describe('lt', function() {
      it('lt exists', function() {
        expect(funkier).to.have.a.property('lt');
      });


      it('lt is a synonym for lessThan', function() {
        expect(funkier.lt).to.equal(funkier.lessThan);
      });
    });


    describe('lte', function() {
      it('lte exists', function() {
        expect(funkier).to.have.a.property('lte');
      });


      it('lte is a synonym for lessThanEqual', function() {
        expect(funkier.lte).to.equal(funkier.lessThanEqual);
      });
    });


    describe('max', function() {
      it('max exists', function() {
        expect(funkier).to.have.a.property('max');
      });


      it('funkierJS\'s max is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.max).to.equal(module.max);
      });


      it('max is a function', function() {
        expect(funkier.max).to.be.a('function');
      });


      it('max has documented arity', function() {
        expect(funkier.arityOf(funkier.max)).to.equal(2);
      });


      it('max is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.max)).to.equal(true);
      });
    });


    describe('min', function() {
      it('min exists', function() {
        expect(funkier).to.have.a.property('min');
      });


      it('funkierJS\'s min is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.min).to.equal(module.min);
      });


      it('min is a function', function() {
        expect(funkier.min).to.be.a('function');
      });


      it('min has documented arity', function() {
        expect(funkier.arityOf(funkier.min)).to.equal(2);
      });


      it('min is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.min)).to.equal(true);
      });
    });


    describe('multiply', function() {
      it('multiply exists', function() {
        expect(funkier).to.have.a.property('multiply');
      });


      it('funkierJS\'s multiply is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.multiply).to.equal(module.multiply);
      });


      it('multiply is a function', function() {
        expect(funkier.multiply).to.be.a('function');
      });


      it('multiply has documented arity', function() {
        expect(funkier.arityOf(funkier.multiply)).to.equal(2);
      });


      it('multiply is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.multiply)).to.equal(true);
      });
    });


    describe('not', function() {
      it('not exists', function() {
        expect(funkier).to.have.a.property('not');
      });


      it('funkierJS\'s not is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.not).to.equal(module.not);
      });


      it('not is a function', function() {
        expect(funkier.not).to.be.a('function');
      });


      it('not has documented arity', function() {
        expect(funkier.arityOf(funkier.not)).to.equal(1);
      });


      it('not is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.not)).to.equal(true);
      });
    });


    describe('objectCurry', function() {
      it('objectCurry exists', function() {
        expect(funkier).to.have.a.property('objectCurry');
      });


      it('funkierJS\'s objectCurry is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.objectCurry).to.equal(module.objectCurry);
      });


      it('objectCurry is a function', function() {
        expect(funkier.objectCurry).to.be.a('function');
      });


      it('objectCurry has documented arity', function() {
        expect(funkier.arityOf(funkier.objectCurry)).to.equal(1);
      });


      it('objectCurry is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.objectCurry)).to.equal(true);
      });
    });


    describe('objectCurryWithArity', function() {
      it('objectCurryWithArity exists', function() {
        expect(funkier).to.have.a.property('objectCurryWithArity');
      });


      it('funkierJS\'s objectCurryWithArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.objectCurryWithArity).to.equal(module.objectCurryWithArity);
      });


      it('objectCurryWithArity is a function', function() {
        expect(funkier.objectCurryWithArity).to.be.a('function');
      });


      it('objectCurryWithArity has documented arity', function() {
        expect(funkier.arityOf(funkier.objectCurryWithArity)).to.equal(2);
      });


      it('objectCurryWithArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.objectCurryWithArity)).to.equal(true);
      });
    });


    describe('odd', function() {
      it('odd exists', function() {
        expect(funkier).to.have.a.property('odd');
      });


      it('funkierJS\'s odd is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.odd).to.equal(module.odd);
      });


      it('odd is a function', function() {
        expect(funkier.odd).to.be.a('function');
      });


      it('odd has documented arity', function() {
        expect(funkier.arityOf(funkier.odd)).to.equal(1);
      });


      it('odd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.odd)).to.equal(true);
      });
    });


    describe('or', function() {
      it('or exists', function() {
        expect(funkier).to.have.a.property('or');
      });


      it('funkierJS\'s or is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.or).to.equal(module.or);
      });


      it('or is a function', function() {
        expect(funkier.or).to.be.a('function');
      });


      it('or has documented arity', function() {
        expect(funkier.arityOf(funkier.or)).to.equal(2);
      });


      it('or is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.or)).to.equal(true);
      });
    });


    describe('pow', function() {
      it('pow exists', function() {
        expect(funkier).to.have.a.property('pow');
      });


      it('pow is a synonym for exp', function() {
        expect(funkier.pow).to.equal(funkier.exp);
      });
    });


    describe('rem', function() {
      it('rem exists', function() {
        expect(funkier).to.have.a.property('rem');
      });


      it('funkierJS\'s rem is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rem).to.equal(module.rem);
      });


      it('rem is a function', function() {
        expect(funkier.rem).to.be.a('function');
      });


      it('rem has documented arity', function() {
        expect(funkier.arityOf(funkier.rem)).to.equal(2);
      });


      it('rem is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rem)).to.equal(true);
      });
    });


    describe('rightShift', function() {
      it('rightShift exists', function() {
        expect(funkier).to.have.a.property('rightShift');
      });


      it('funkierJS\'s rightShift is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rightShift).to.equal(module.rightShift);
      });


      it('rightShift is a function', function() {
        expect(funkier.rightShift).to.be.a('function');
      });


      it('rightShift has documented arity', function() {
        expect(funkier.arityOf(funkier.rightShift)).to.equal(2);
      });


      it('rightShift is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rightShift)).to.equal(true);
      });
    });


    describe('rightShiftZero', function() {
      it('rightShiftZero exists', function() {
        expect(funkier).to.have.a.property('rightShiftZero');
      });


      it('funkierJS\'s rightShiftZero is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rightShiftZero).to.equal(module.rightShiftZero);
      });


      it('rightShiftZero is a function', function() {
        expect(funkier.rightShiftZero).to.be.a('function');
      });


      it('rightShiftZero has documented arity', function() {
        expect(funkier.arityOf(funkier.rightShiftZero)).to.equal(2);
      });


      it('rightShiftZero is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rightShiftZero)).to.equal(true);
      });
    });


    describe('subtract', function() {
      it('subtract exists', function() {
        expect(funkier).to.have.a.property('subtract');
      });


      it('funkierJS\'s subtract is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.subtract).to.equal(module.subtract);
      });


      it('subtract is a function', function() {
        expect(funkier.subtract).to.be.a('function');
      });


      it('subtract has documented arity', function() {
        expect(funkier.arityOf(funkier.subtract)).to.equal(2);
      });


      it('subtract is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.subtract)).to.equal(true);
      });
    });


    describe('xor', function() {
      it('xor exists', function() {
        expect(funkier).to.have.a.property('xor');
      });


      it('funkierJS\'s xor is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.xor).to.equal(module.xor);
      });


      it('xor is a function', function() {
        expect(funkier.xor).to.be.a('function');
      });


      it('xor has documented arity', function() {
        expect(funkier.arityOf(funkier.xor)).to.equal(2);
      });


      it('xor is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.xor)).to.equal(true);
      });
    });
  });


  describe('Exported values', function() {
    var documentedNames;


    beforeEach(function() {
      documentedNames = ['help', 'add', 'and', 'arity', 'arityOf', 'bind', 'bindWithContext',
         'bindWithContextAndArity', 'bitwiseAnd', 'bitwiseNot', 'bitwiseOr', 'bitwiseXor', 'curry', 'curryWithArity',
         'div', 'divide', 'even', 'exp', 'greaterThan', 'greaterThanEqual', 'gt', 'gte', 'leftShift', 'lessThan',
         'lessThanEqual', 'log', 'lt', 'lte', 'max', 'min', 'multiply', 'not', 'objectCurry', 'objectCurryWithArity',
         'odd', 'or', 'pow', 'rem', 'rightShift', 'rightShiftZero', 'subtract', 'xor'];
    });


    Object.keys(funkier).forEach(function(k) {
      var prop = funkier[k];
      if (k[0] === '_' || prop === null ||
          (typeof(prop) !== 'object' && typeof(prop) !== 'function'))
        return;

      it(k + ' is documented', function() {
        expect(documentedNames.indexOf(k)).to.not.equal(-1);
      });
    });
  });
})();
