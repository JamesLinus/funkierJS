(function() {
  "use strict";


  /* NOTE: THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY */


  var expect = require('chai').expect;
  var funkier = require('../../lib/funkier');


  describe('Documented values', function() {
    describe('Err', function() {
      it('Err exists', function() {
        expect(funkier).to.have.a.property('Err');
      });


      it('funkierJS\'s Err is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.Err).to.equal(module.Err);
      });


      it('Err is a function', function() {
        expect(funkier.Err).to.be.a('function');
      });


      it('Err has documented arity', function() {
        expect(funkier.arityOf(funkier.Err)).to.equal(1);
      });


    });


    describe('Just', function() {
      it('Just exists', function() {
        expect(funkier).to.have.a.property('Just');
      });


      it('funkierJS\'s Just is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.Just).to.equal(module.Just);
      });


      it('Just is a function', function() {
        expect(funkier.Just).to.be.a('function');
      });


      it('Just has documented arity', function() {
        expect(funkier.arityOf(funkier.Just)).to.equal(1);
      });


    });


    describe('Maybe', function() {
      it('Maybe exists', function() {
        expect(funkier).to.have.a.property('Maybe');
      });


      it('funkierJS\'s Maybe is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.Maybe).to.equal(module.Maybe);
      });


      it('Maybe is a function', function() {
        expect(funkier.Maybe).to.be.a('function');
      });


      it('Maybe has documented arity', function() {
        expect(funkier.arityOf(funkier.Maybe)).to.equal(0);
      });


    });


    describe('Nothing', function() {
      it('Nothing exists', function() {
        expect(funkier).to.have.a.property('Nothing');
      });


      it('funkierJS\'s Nothing is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.Nothing).to.equal(module.Nothing);
      });


      it('Nothing is an object', function() {
        expect(funkier.Nothing).to.be.an('object');
      });
    });


    describe('Ok', function() {
      it('Ok exists', function() {
        expect(funkier).to.have.a.property('Ok');
      });


      it('funkierJS\'s Ok is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.Ok).to.equal(module.Ok);
      });


      it('Ok is a function', function() {
        expect(funkier.Ok).to.be.a('function');
      });


      it('Ok has documented arity', function() {
        expect(funkier.arityOf(funkier.Ok)).to.equal(1);
      });


    });


    describe('Pair', function() {
      it('Pair exists', function() {
        expect(funkier).to.have.a.property('Pair');
      });


      it('funkierJS\'s Pair is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.Pair).to.equal(module.Pair);
      });


      it('Pair is a function', function() {
        expect(funkier.Pair).to.be.a('function');
      });


      it('Pair has documented arity', function() {
        expect(funkier.arityOf(funkier.Pair)).to.equal(2);
      });


    });


    describe('Result', function() {
      it('Result exists', function() {
        expect(funkier).to.have.a.property('Result');
      });


      it('funkierJS\'s Result is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.Result).to.equal(module.Result);
      });


      it('Result is a function', function() {
        expect(funkier.Result).to.be.a('function');
      });


      it('Result has documented arity', function() {
        expect(funkier.arityOf(funkier.Result)).to.equal(0);
      });


    });


    describe('add', function() {
      it('add exists', function() {
        expect(funkier).to.have.a.property('add');
      });


      it('funkierJS\'s add is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.add).to.equal(module.add);
      });


      it('add is a function', function() {
        expect(funkier.add).to.be.a('function');
      });


      it('add has documented arity', function() {
        expect(funkier.arityOf(funkier.add)).to.equal(2);
      });


      it('add is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.add)).to.equal(true);
      });
    });


    describe('all', function() {
      it('all exists', function() {
        expect(funkier).to.have.a.property('all');
      });


      it('all is a synonym for every', function() {
        expect(funkier.all).to.equal(funkier.every);
      });
    });


    describe('and', function() {
      it('and exists', function() {
        expect(funkier).to.have.a.property('and');
      });


      it('funkierJS\'s and is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.and).to.equal(module.and);
      });


      it('and is a function', function() {
        expect(funkier.and).to.be.a('function');
      });


      it('and has documented arity', function() {
        expect(funkier.arityOf(funkier.and)).to.equal(2);
      });


      it('and is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.and)).to.equal(true);
      });
    });


    describe('andPred', function() {
      it('andPred exists', function() {
        expect(funkier).to.have.a.property('andPred');
      });


      it('funkierJS\'s andPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.andPred).to.equal(module.andPred);
      });


      it('andPred is a function', function() {
        expect(funkier.andPred).to.be.a('function');
      });


      it('andPred has documented arity', function() {
        expect(funkier.arityOf(funkier.andPred)).to.equal(2);
      });


      it('andPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.andPred)).to.equal(true);
      });
    });


    describe('any', function() {
      it('any exists', function() {
        expect(funkier).to.have.a.property('any');
      });


      it('any is a synonym for some', function() {
        expect(funkier.any).to.equal(funkier.some);
      });
    });


    describe('append', function() {
      it('append exists', function() {
        expect(funkier).to.have.a.property('append');
      });


      it('funkierJS\'s append is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.append).to.equal(module.append);
      });


      it('append is a function', function() {
        expect(funkier.append).to.be.a('function');
      });


      it('append has documented arity', function() {
        expect(funkier.arityOf(funkier.append)).to.equal(2);
      });


      it('append is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.append)).to.equal(true);
      });
    });


    describe('apply', function() {
      it('apply exists', function() {
        expect(funkier).to.have.a.property('apply');
      });


      it('funkierJS\'s apply is indeed the documented value', function() {
        var module = require('../../lib/components/fn');
        expect(funkier.apply).to.equal(module.apply);
      });


      it('apply is a function', function() {
        expect(funkier.apply).to.be.a('function');
      });


      it('apply has documented arity', function() {
        expect(funkier.arityOf(funkier.apply)).to.equal(2);
      });


      it('apply is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.apply)).to.equal(true);
      });
    });


    describe('arity', function() {
      it('arity exists', function() {
        expect(funkier).to.have.a.property('arity');
      });


      it('arity is a synonym for arityOf', function() {
        expect(funkier.arity).to.equal(funkier.arityOf);
      });
    });


    describe('arityOf', function() {
      it('arityOf exists', function() {
        expect(funkier).to.have.a.property('arityOf');
      });


      it('funkierJS\'s arityOf is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.arityOf).to.equal(module.arityOf);
      });


      it('arityOf is a function', function() {
        expect(funkier.arityOf).to.be.a('function');
      });


      it('arityOf has documented arity', function() {
        expect(funkier.arityOf(funkier.arityOf)).to.equal(1);
      });


      it('arityOf is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.arityOf)).to.equal(true);
      });
    });


    describe('asArray', function() {
      it('asArray exists', function() {
        expect(funkier).to.have.a.property('asArray');
      });


      it('funkierJS\'s asArray is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.asArray).to.equal(module.asArray);
      });


      it('asArray is a function', function() {
        expect(funkier.asArray).to.be.a('function');
      });


      it('asArray has documented arity', function() {
        expect(funkier.arityOf(funkier.asArray)).to.equal(1);
      });


      it('asArray is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.asArray)).to.equal(true);
      });
    });


    describe('bind', function() {
      it('bind exists', function() {
        expect(funkier).to.have.a.property('bind');
      });


      it('funkierJS\'s bind is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.bind).to.equal(module.bind);
      });


      it('bind is a function', function() {
        expect(funkier.bind).to.be.a('function');
      });


      it('bind has documented arity', function() {
        expect(funkier.arityOf(funkier.bind)).to.equal(2);
      });


      it('bind is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bind)).to.equal(true);
      });
    });


    describe('bindWithContext', function() {
      it('bindWithContext exists', function() {
        expect(funkier).to.have.a.property('bindWithContext');
      });


      it('bindWithContext is a synonym for bind', function() {
        expect(funkier.bindWithContext).to.equal(funkier.bind);
      });
    });


    describe('bindWithContextAndArity', function() {
      it('bindWithContextAndArity exists', function() {
        expect(funkier).to.have.a.property('bindWithContextAndArity');
      });


      it('funkierJS\'s bindWithContextAndArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.bindWithContextAndArity).to.equal(module.bindWithContextAndArity);
      });


      it('bindWithContextAndArity is a function', function() {
        expect(funkier.bindWithContextAndArity).to.be.a('function');
      });


      it('bindWithContextAndArity has documented arity', function() {
        expect(funkier.arityOf(funkier.bindWithContextAndArity)).to.equal(3);
      });


      it('bindWithContextAndArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bindWithContextAndArity)).to.equal(true);
      });
    });


    describe('bitwiseAnd', function() {
      it('bitwiseAnd exists', function() {
        expect(funkier).to.have.a.property('bitwiseAnd');
      });


      it('funkierJS\'s bitwiseAnd is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseAnd).to.equal(module.bitwiseAnd);
      });


      it('bitwiseAnd is a function', function() {
        expect(funkier.bitwiseAnd).to.be.a('function');
      });


      it('bitwiseAnd has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseAnd)).to.equal(2);
      });


      it('bitwiseAnd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseAnd)).to.equal(true);
      });
    });


    describe('bitwiseNot', function() {
      it('bitwiseNot exists', function() {
        expect(funkier).to.have.a.property('bitwiseNot');
      });


      it('funkierJS\'s bitwiseNot is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseNot).to.equal(module.bitwiseNot);
      });


      it('bitwiseNot is a function', function() {
        expect(funkier.bitwiseNot).to.be.a('function');
      });


      it('bitwiseNot has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseNot)).to.equal(1);
      });


      it('bitwiseNot is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseNot)).to.equal(true);
      });
    });


    describe('bitwiseOr', function() {
      it('bitwiseOr exists', function() {
        expect(funkier).to.have.a.property('bitwiseOr');
      });


      it('funkierJS\'s bitwiseOr is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseOr).to.equal(module.bitwiseOr);
      });


      it('bitwiseOr is a function', function() {
        expect(funkier.bitwiseOr).to.be.a('function');
      });


      it('bitwiseOr has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseOr)).to.equal(2);
      });


      it('bitwiseOr is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseOr)).to.equal(true);
      });
    });


    describe('bitwiseXor', function() {
      it('bitwiseXor exists', function() {
        expect(funkier).to.have.a.property('bitwiseXor');
      });


      it('funkierJS\'s bitwiseXor is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.bitwiseXor).to.equal(module.bitwiseXor);
      });


      it('bitwiseXor is a function', function() {
        expect(funkier.bitwiseXor).to.be.a('function');
      });


      it('bitwiseXor has documented arity', function() {
        expect(funkier.arityOf(funkier.bitwiseXor)).to.equal(2);
      });


      it('bitwiseXor is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.bitwiseXor)).to.equal(true);
      });
    });


    describe('callProp', function() {
      it('callProp exists', function() {
        expect(funkier).to.have.a.property('callProp');
      });


      it('funkierJS\'s callProp is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.callProp).to.equal(module.callProp);
      });


      it('callProp is a function', function() {
        expect(funkier.callProp).to.be.a('function');
      });


      it('callProp has documented arity', function() {
        expect(funkier.arityOf(funkier.callProp)).to.equal(1);
      });


      it('callProp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.callProp)).to.equal(true);
      });
    });


    describe('callPropWithArity', function() {
      it('callPropWithArity exists', function() {
        expect(funkier).to.have.a.property('callPropWithArity');
      });


      it('funkierJS\'s callPropWithArity is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.callPropWithArity).to.equal(module.callPropWithArity);
      });


      it('callPropWithArity is a function', function() {
        expect(funkier.callPropWithArity).to.be.a('function');
      });


      it('callPropWithArity has documented arity', function() {
        expect(funkier.arityOf(funkier.callPropWithArity)).to.equal(2);
      });


      it('callPropWithArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.callPropWithArity)).to.equal(true);
      });
    });


    describe('chr', function() {
      it('chr exists', function() {
        expect(funkier).to.have.a.property('chr');
      });


      it('funkierJS\'s chr is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.chr).to.equal(module.chr);
      });


      it('chr is a function', function() {
        expect(funkier.chr).to.be.a('function');
      });


      it('chr has documented arity', function() {
        expect(funkier.arityOf(funkier.chr)).to.equal(1);
      });


      it('chr is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.chr)).to.equal(true);
      });
    });


    describe('clone', function() {
      it('clone exists', function() {
        expect(funkier).to.have.a.property('clone');
      });


      it('funkierJS\'s clone is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.clone).to.equal(module.clone);
      });


      it('clone is a function', function() {
        expect(funkier.clone).to.be.a('function');
      });


      it('clone has documented arity', function() {
        expect(funkier.arityOf(funkier.clone)).to.equal(1);
      });


      it('clone is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.clone)).to.equal(true);
      });
    });


    describe('compose', function() {
      it('compose exists', function() {
        expect(funkier).to.have.a.property('compose');
      });


      it('funkierJS\'s compose is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.compose).to.equal(module.compose);
      });


      it('compose is a function', function() {
        expect(funkier.compose).to.be.a('function');
      });


      it('compose has documented arity', function() {
        expect(funkier.arityOf(funkier.compose)).to.equal(2);
      });


      it('compose is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.compose)).to.equal(true);
      });
    });


    describe('composeMany', function() {
      it('composeMany exists', function() {
        expect(funkier).to.have.a.property('composeMany');
      });


      it('funkierJS\'s composeMany is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.composeMany).to.equal(module.composeMany);
      });


      it('composeMany is a function', function() {
        expect(funkier.composeMany).to.be.a('function');
      });


      it('composeMany has documented arity', function() {
        expect(funkier.arityOf(funkier.composeMany)).to.equal(1);
      });


      it('composeMany is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.composeMany)).to.equal(true);
      });
    });


    describe('composeOn', function() {
      it('composeOn exists', function() {
        expect(funkier).to.have.a.property('composeOn');
      });


      it('funkierJS\'s composeOn is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.composeOn).to.equal(module.composeOn);
      });


      it('composeOn is a function', function() {
        expect(funkier.composeOn).to.be.a('function');
      });


      it('composeOn has documented arity', function() {
        expect(funkier.arityOf(funkier.composeOn)).to.equal(3);
      });


      it('composeOn is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.composeOn)).to.equal(true);
      });
    });


    describe('concat', function() {
      it('concat exists', function() {
        expect(funkier).to.have.a.property('concat');
      });


      it('funkierJS\'s concat is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.concat).to.equal(module.concat);
      });


      it('concat is a function', function() {
        expect(funkier.concat).to.be.a('function');
      });


      it('concat has documented arity', function() {
        expect(funkier.arityOf(funkier.concat)).to.equal(2);
      });


      it('concat is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.concat)).to.equal(true);
      });
    });


    describe('constant', function() {
      it('constant exists', function() {
        expect(funkier).to.have.a.property('constant');
      });


      it('funkierJS\'s constant is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.constant).to.equal(module.constant);
      });


      it('constant is a function', function() {
        expect(funkier.constant).to.be.a('function');
      });


      it('constant has documented arity', function() {
        expect(funkier.arityOf(funkier.constant)).to.equal(2);
      });


      it('constant is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.constant)).to.equal(true);
      });
    });


    describe('constant0', function() {
      it('constant0 exists', function() {
        expect(funkier).to.have.a.property('constant0');
      });


      it('funkierJS\'s constant0 is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.constant0).to.equal(module.constant0);
      });


      it('constant0 is a function', function() {
        expect(funkier.constant0).to.be.a('function');
      });


      it('constant0 has documented arity', function() {
        expect(funkier.arityOf(funkier.constant0)).to.equal(1);
      });


      it('constant0 is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.constant0)).to.equal(true);
      });
    });


    describe('copy', function() {
      it('copy exists', function() {
        expect(funkier).to.have.a.property('copy');
      });


      it('funkierJS\'s copy is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.copy).to.equal(module.copy);
      });


      it('copy is a function', function() {
        expect(funkier.copy).to.be.a('function');
      });


      it('copy has documented arity', function() {
        expect(funkier.arityOf(funkier.copy)).to.equal(1);
      });


      it('copy is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.copy)).to.equal(true);
      });
    });


    describe('createObject', function() {
      it('createObject exists', function() {
        expect(funkier).to.have.a.property('createObject');
      });


      it('funkierJS\'s createObject is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.createObject).to.equal(module.createObject);
      });


      it('createObject is a function', function() {
        expect(funkier.createObject).to.be.a('function');
      });


      it('createObject has documented arity', function() {
        expect(funkier.arityOf(funkier.createObject)).to.equal(1);
      });


      it('createObject is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.createObject)).to.equal(true);
      });
    });


    describe('createObjectWithProps', function() {
      it('createObjectWithProps exists', function() {
        expect(funkier).to.have.a.property('createObjectWithProps');
      });


      it('funkierJS\'s createObjectWithProps is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.createObjectWithProps).to.equal(module.createObjectWithProps);
      });


      it('createObjectWithProps is a function', function() {
        expect(funkier.createObjectWithProps).to.be.a('function');
      });


      it('createObjectWithProps has documented arity', function() {
        expect(funkier.arityOf(funkier.createObjectWithProps)).to.equal(2);
      });


      it('createObjectWithProps is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.createObjectWithProps)).to.equal(true);
      });
    });


    describe('createProp', function() {
      it('createProp exists', function() {
        expect(funkier).to.have.a.property('createProp');
      });


      it('funkierJS\'s createProp is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.createProp).to.equal(module.createProp);
      });


      it('createProp is a function', function() {
        expect(funkier.createProp).to.be.a('function');
      });


      it('createProp has documented arity', function() {
        expect(funkier.arityOf(funkier.createProp)).to.equal(3);
      });


      it('createProp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.createProp)).to.equal(true);
      });
    });


    describe('curry', function() {
      it('curry exists', function() {
        expect(funkier).to.have.a.property('curry');
      });


      it('funkierJS\'s curry is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.curry).to.equal(module.curry);
      });


      it('curry is a function', function() {
        expect(funkier.curry).to.be.a('function');
      });


      it('curry has documented arity', function() {
        expect(funkier.arityOf(funkier.curry)).to.equal(1);
      });


      it('curry is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.curry)).to.equal(true);
      });
    });


    describe('curryOwn', function() {
      it('curryOwn exists', function() {
        expect(funkier).to.have.a.property('curryOwn');
      });


      it('funkierJS\'s curryOwn is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.curryOwn).to.equal(module.curryOwn);
      });


      it('curryOwn is a function', function() {
        expect(funkier.curryOwn).to.be.a('function');
      });


      it('curryOwn has documented arity', function() {
        expect(funkier.arityOf(funkier.curryOwn)).to.equal(1);
      });


      it('curryOwn is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.curryOwn)).to.equal(true);
      });
    });


    describe('curryWithArity', function() {
      it('curryWithArity exists', function() {
        expect(funkier).to.have.a.property('curryWithArity');
      });


      it('funkierJS\'s curryWithArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.curryWithArity).to.equal(module.curryWithArity);
      });


      it('curryWithArity is a function', function() {
        expect(funkier.curryWithArity).to.be.a('function');
      });


      it('curryWithArity has documented arity', function() {
        expect(funkier.arityOf(funkier.curryWithArity)).to.equal(2);
      });


      it('curryWithArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.curryWithArity)).to.equal(true);
      });
    });


    describe('deepEqual', function() {
      it('deepEqual exists', function() {
        expect(funkier).to.have.a.property('deepEqual');
      });


      it('funkierJS\'s deepEqual is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.deepEqual).to.equal(module.deepEqual);
      });


      it('deepEqual is a function', function() {
        expect(funkier.deepEqual).to.be.a('function');
      });


      it('deepEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.deepEqual)).to.equal(2);
      });


      it('deepEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.deepEqual)).to.equal(true);
      });
    });


    describe('deepEquals', function() {
      it('deepEquals exists', function() {
        expect(funkier).to.have.a.property('deepEquals');
      });


      it('deepEquals is a synonym for deepEqual', function() {
        expect(funkier.deepEquals).to.equal(funkier.deepEqual);
      });
    });


    describe('defaultTap', function() {
      it('defaultTap exists', function() {
        expect(funkier).to.have.a.property('defaultTap');
      });


      it('defaultTap is a synonym for extractOrDefault', function() {
        expect(funkier.defaultTap).to.equal(funkier.extractOrDefault);
      });
    });


    describe('defineProperties', function() {
      it('defineProperties exists', function() {
        expect(funkier).to.have.a.property('defineProperties');
      });


      it('funkierJS\'s defineProperties is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.defineProperties).to.equal(module.defineProperties);
      });


      it('defineProperties is a function', function() {
        expect(funkier.defineProperties).to.be.a('function');
      });


      it('defineProperties has documented arity', function() {
        expect(funkier.arityOf(funkier.defineProperties)).to.equal(2);
      });


      it('defineProperties is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.defineProperties)).to.equal(true);
      });
    });


    describe('defineProperty', function() {
      it('defineProperty exists', function() {
        expect(funkier).to.have.a.property('defineProperty');
      });


      it('funkierJS\'s defineProperty is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.defineProperty).to.equal(module.defineProperty);
      });


      it('defineProperty is a function', function() {
        expect(funkier.defineProperty).to.be.a('function');
      });


      it('defineProperty has documented arity', function() {
        expect(funkier.arityOf(funkier.defineProperty)).to.equal(3);
      });


      it('defineProperty is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.defineProperty)).to.equal(true);
      });
    });


    describe('deleteProp', function() {
      it('deleteProp exists', function() {
        expect(funkier).to.have.a.property('deleteProp');
      });


      it('funkierJS\'s deleteProp is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.deleteProp).to.equal(module.deleteProp);
      });


      it('deleteProp is a function', function() {
        expect(funkier.deleteProp).to.be.a('function');
      });


      it('deleteProp has documented arity', function() {
        expect(funkier.arityOf(funkier.deleteProp)).to.equal(2);
      });


      it('deleteProp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.deleteProp)).to.equal(true);
      });
    });


    describe('descriptors', function() {
      it('descriptors exists', function() {
        expect(funkier).to.have.a.property('descriptors');
      });


      it('funkierJS\'s descriptors is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.descriptors).to.equal(module.descriptors);
      });


      it('descriptors is a function', function() {
        expect(funkier.descriptors).to.be.a('function');
      });


      it('descriptors has documented arity', function() {
        expect(funkier.arityOf(funkier.descriptors)).to.equal(1);
      });


      it('descriptors is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.descriptors)).to.equal(true);
      });
    });


    describe('div', function() {
      it('div exists', function() {
        expect(funkier).to.have.a.property('div');
      });


      it('funkierJS\'s div is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.div).to.equal(module.div);
      });


      it('div is a function', function() {
        expect(funkier.div).to.be.a('function');
      });


      it('div has documented arity', function() {
        expect(funkier.arityOf(funkier.div)).to.equal(2);
      });


      it('div is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.div)).to.equal(true);
      });
    });


    describe('divide', function() {
      it('divide exists', function() {
        expect(funkier).to.have.a.property('divide');
      });


      it('funkierJS\'s divide is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.divide).to.equal(module.divide);
      });


      it('divide is a function', function() {
        expect(funkier.divide).to.be.a('function');
      });


      it('divide has documented arity', function() {
        expect(funkier.arityOf(funkier.divide)).to.equal(2);
      });


      it('divide is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.divide)).to.equal(true);
      });
    });


    describe('drop', function() {
      it('drop exists', function() {
        expect(funkier).to.have.a.property('drop');
      });


      it('funkierJS\'s drop is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.drop).to.equal(module.drop);
      });


      it('drop is a function', function() {
        expect(funkier.drop).to.be.a('function');
      });


      it('drop has documented arity', function() {
        expect(funkier.arityOf(funkier.drop)).to.equal(2);
      });


      it('drop is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.drop)).to.equal(true);
      });
    });


    describe('dropWhile', function() {
      it('dropWhile exists', function() {
        expect(funkier).to.have.a.property('dropWhile');
      });


      it('funkierJS\'s dropWhile is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.dropWhile).to.equal(module.dropWhile);
      });


      it('dropWhile is a function', function() {
        expect(funkier.dropWhile).to.be.a('function');
      });


      it('dropWhile has documented arity', function() {
        expect(funkier.arityOf(funkier.dropWhile)).to.equal(2);
      });


      it('dropWhile is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.dropWhile)).to.equal(true);
      });
    });


    describe('each', function() {
      it('each exists', function() {
        expect(funkier).to.have.a.property('each');
      });


      it('funkierJS\'s each is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.each).to.equal(module.each);
      });


      it('each is a function', function() {
        expect(funkier.each).to.be.a('function');
      });


      it('each has documented arity', function() {
        expect(funkier.arityOf(funkier.each)).to.equal(2);
      });


      it('each is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.each)).to.equal(true);
      });
    });


    describe('either', function() {
      it('either exists', function() {
        expect(funkier).to.have.a.property('either');
      });


      it('funkierJS\'s either is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.either).to.equal(module.either);
      });


      it('either is a function', function() {
        expect(funkier.either).to.be.a('function');
      });


      it('either has documented arity', function() {
        expect(funkier.arityOf(funkier.either)).to.equal(3);
      });


      it('either is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.either)).to.equal(true);
      });
    });


    describe('element', function() {
      it('element exists', function() {
        expect(funkier).to.have.a.property('element');
      });


      it('funkierJS\'s element is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.element).to.equal(module.element);
      });


      it('element is a function', function() {
        expect(funkier.element).to.be.a('function');
      });


      it('element has documented arity', function() {
        expect(funkier.arityOf(funkier.element)).to.equal(2);
      });


      it('element is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.element)).to.equal(true);
      });
    });


    describe('elementWith', function() {
      it('elementWith exists', function() {
        expect(funkier).to.have.a.property('elementWith');
      });


      it('funkierJS\'s elementWith is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.elementWith).to.equal(module.elementWith);
      });


      it('elementWith is a function', function() {
        expect(funkier.elementWith).to.be.a('function');
      });


      it('elementWith has documented arity', function() {
        expect(funkier.arityOf(funkier.elementWith)).to.equal(2);
      });


      it('elementWith is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.elementWith)).to.equal(true);
      });
    });


    describe('equals', function() {
      it('equals exists', function() {
        expect(funkier).to.have.a.property('equals');
      });


      it('funkierJS\'s equals is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.equals).to.equal(module.equals);
      });


      it('equals is a function', function() {
        expect(funkier.equals).to.be.a('function');
      });


      it('equals has documented arity', function() {
        expect(funkier.arityOf(funkier.equals)).to.equal(2);
      });


      it('equals is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.equals)).to.equal(true);
      });
    });


    describe('even', function() {
      it('even exists', function() {
        expect(funkier).to.have.a.property('even');
      });


      it('funkierJS\'s even is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.even).to.equal(module.even);
      });


      it('even is a function', function() {
        expect(funkier.even).to.be.a('function');
      });


      it('even has documented arity', function() {
        expect(funkier.arityOf(funkier.even)).to.equal(1);
      });


      it('even is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.even)).to.equal(true);
      });
    });


    describe('every', function() {
      it('every exists', function() {
        expect(funkier).to.have.a.property('every');
      });


      it('funkierJS\'s every is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.every).to.equal(module.every);
      });


      it('every is a function', function() {
        expect(funkier.every).to.be.a('function');
      });


      it('every has documented arity', function() {
        expect(funkier.arityOf(funkier.every)).to.equal(2);
      });


      it('every is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.every)).to.equal(true);
      });
    });


    describe('exp', function() {
      it('exp exists', function() {
        expect(funkier).to.have.a.property('exp');
      });


      it('funkierJS\'s exp is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.exp).to.equal(module.exp);
      });


      it('exp is a function', function() {
        expect(funkier.exp).to.be.a('function');
      });


      it('exp has documented arity', function() {
        expect(funkier.arityOf(funkier.exp)).to.equal(2);
      });


      it('exp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.exp)).to.equal(true);
      });
    });


    describe('extend', function() {
      it('extend exists', function() {
        expect(funkier).to.have.a.property('extend');
      });


      it('funkierJS\'s extend is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.extend).to.equal(module.extend);
      });


      it('extend is a function', function() {
        expect(funkier.extend).to.be.a('function');
      });


      it('extend has documented arity', function() {
        expect(funkier.arityOf(funkier.extend)).to.equal(2);
      });


      it('extend is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.extend)).to.equal(true);
      });
    });


    describe('extendOwn', function() {
      it('extendOwn exists', function() {
        expect(funkier).to.have.a.property('extendOwn');
      });


      it('funkierJS\'s extendOwn is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.extendOwn).to.equal(module.extendOwn);
      });


      it('extendOwn is a function', function() {
        expect(funkier.extendOwn).to.be.a('function');
      });


      it('extendOwn has documented arity', function() {
        expect(funkier.arityOf(funkier.extendOwn)).to.equal(2);
      });


      it('extendOwn is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.extendOwn)).to.equal(true);
      });
    });


    describe('extract', function() {
      it('extract exists', function() {
        expect(funkier).to.have.a.property('extract');
      });


      it('funkierJS\'s extract is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.extract).to.equal(module.extract);
      });


      it('extract is a function', function() {
        expect(funkier.extract).to.be.a('function');
      });


      it('extract has documented arity', function() {
        expect(funkier.arityOf(funkier.extract)).to.equal(2);
      });


      it('extract is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.extract)).to.equal(true);
      });
    });


    describe('extractOrDefault', function() {
      it('extractOrDefault exists', function() {
        expect(funkier).to.have.a.property('extractOrDefault');
      });


      it('funkierJS\'s extractOrDefault is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.extractOrDefault).to.equal(module.extractOrDefault);
      });


      it('extractOrDefault is a function', function() {
        expect(funkier.extractOrDefault).to.be.a('function');
      });


      it('extractOrDefault has documented arity', function() {
        expect(funkier.arityOf(funkier.extractOrDefault)).to.equal(3);
      });


      it('extractOrDefault is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.extractOrDefault)).to.equal(true);
      });
    });


    describe('fMap', function() {
      it('fMap exists', function() {
        expect(funkier).to.have.a.property('fMap');
      });


      it('fMap is a synonym for fmap', function() {
        expect(funkier.fMap).to.equal(funkier.fmap);
      });
    });


    describe('filter', function() {
      it('filter exists', function() {
        expect(funkier).to.have.a.property('filter');
      });


      it('funkierJS\'s filter is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.filter).to.equal(module.filter);
      });


      it('filter is a function', function() {
        expect(funkier.filter).to.be.a('function');
      });


      it('filter has documented arity', function() {
        expect(funkier.arityOf(funkier.filter)).to.equal(2);
      });


      it('filter is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.filter)).to.equal(true);
      });
    });


    describe('first', function() {
      it('first exists', function() {
        expect(funkier).to.have.a.property('first');
      });


      it('first is a synonym for fst', function() {
        expect(funkier.first).to.equal(funkier.fst);
      });
    });


    describe('firstMatch', function() {
      it('firstMatch exists', function() {
        expect(funkier).to.have.a.property('firstMatch');
      });


      it('funkierJS\'s firstMatch is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.firstMatch).to.equal(module.firstMatch);
      });


      it('firstMatch is a function', function() {
        expect(funkier.firstMatch).to.be.a('function');
      });


      it('firstMatch has documented arity', function() {
        expect(funkier.arityOf(funkier.firstMatch)).to.equal(2);
      });


      it('firstMatch is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.firstMatch)).to.equal(true);
      });
    });


    describe('firstMatchFrom', function() {
      it('firstMatchFrom exists', function() {
        expect(funkier).to.have.a.property('firstMatchFrom');
      });


      it('funkierJS\'s firstMatchFrom is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.firstMatchFrom).to.equal(module.firstMatchFrom);
      });


      it('firstMatchFrom is a function', function() {
        expect(funkier.firstMatchFrom).to.be.a('function');
      });


      it('firstMatchFrom has documented arity', function() {
        expect(funkier.arityOf(funkier.firstMatchFrom)).to.equal(3);
      });


      it('firstMatchFrom is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.firstMatchFrom)).to.equal(true);
      });
    });


    describe('flatten', function() {
      it('flatten exists', function() {
        expect(funkier).to.have.a.property('flatten');
      });


      it('funkierJS\'s flatten is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.flatten).to.equal(module.flatten);
      });


      it('flatten is a function', function() {
        expect(funkier.flatten).to.be.a('function');
      });


      it('flatten has documented arity', function() {
        expect(funkier.arityOf(funkier.flatten)).to.equal(1);
      });


      it('flatten is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.flatten)).to.equal(true);
      });
    });


    describe('flattenMap', function() {
      it('flattenMap exists', function() {
        expect(funkier).to.have.a.property('flattenMap');
      });


      it('funkierJS\'s flattenMap is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.flattenMap).to.equal(module.flattenMap);
      });


      it('flattenMap is a function', function() {
        expect(funkier.flattenMap).to.be.a('function');
      });


      it('flattenMap has documented arity', function() {
        expect(funkier.arityOf(funkier.flattenMap)).to.equal(2);
      });


      it('flattenMap is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.flattenMap)).to.equal(true);
      });
    });


    describe('flip', function() {
      it('flip exists', function() {
        expect(funkier).to.have.a.property('flip');
      });


      it('funkierJS\'s flip is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.flip).to.equal(module.flip);
      });


      it('flip is a function', function() {
        expect(funkier.flip).to.be.a('function');
      });


      it('flip has documented arity', function() {
        expect(funkier.arityOf(funkier.flip)).to.equal(1);
      });


      it('flip is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.flip)).to.equal(true);
      });
    });


    describe('fmap', function() {
      it('fmap exists', function() {
        expect(funkier).to.have.a.property('fmap');
      });


      it('funkierJS\'s fmap is indeed the documented value', function() {
        var module = require('../../lib/components/categories');
        expect(funkier.fmap).to.equal(module.fmap);
      });


      it('fmap is a function', function() {
        expect(funkier.fmap).to.be.a('function');
      });


      it('fmap has documented arity', function() {
        expect(funkier.arityOf(funkier.fmap)).to.equal(2);
      });


      it('fmap is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.fmap)).to.equal(true);
      });
    });


    describe('foldl', function() {
      it('foldl exists', function() {
        expect(funkier).to.have.a.property('foldl');
      });


      it('funkierJS\'s foldl is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.foldl).to.equal(module.foldl);
      });


      it('foldl is a function', function() {
        expect(funkier.foldl).to.be.a('function');
      });


      it('foldl has documented arity', function() {
        expect(funkier.arityOf(funkier.foldl)).to.equal(3);
      });


      it('foldl is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.foldl)).to.equal(true);
      });
    });


    describe('foldl1', function() {
      it('foldl1 exists', function() {
        expect(funkier).to.have.a.property('foldl1');
      });


      it('funkierJS\'s foldl1 is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.foldl1).to.equal(module.foldl1);
      });


      it('foldl1 is a function', function() {
        expect(funkier.foldl1).to.be.a('function');
      });


      it('foldl1 has documented arity', function() {
        expect(funkier.arityOf(funkier.foldl1)).to.equal(2);
      });


      it('foldl1 is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.foldl1)).to.equal(true);
      });
    });


    describe('foldr', function() {
      it('foldr exists', function() {
        expect(funkier).to.have.a.property('foldr');
      });


      it('funkierJS\'s foldr is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.foldr).to.equal(module.foldr);
      });


      it('foldr is a function', function() {
        expect(funkier.foldr).to.be.a('function');
      });


      it('foldr has documented arity', function() {
        expect(funkier.arityOf(funkier.foldr)).to.equal(3);
      });


      it('foldr is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.foldr)).to.equal(true);
      });
    });


    describe('foldr1', function() {
      it('foldr1 exists', function() {
        expect(funkier).to.have.a.property('foldr1');
      });


      it('funkierJS\'s foldr1 is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.foldr1).to.equal(module.foldr1);
      });


      it('foldr1 is a function', function() {
        expect(funkier.foldr1).to.be.a('function');
      });


      it('foldr1 has documented arity', function() {
        expect(funkier.arityOf(funkier.foldr1)).to.equal(2);
      });


      it('foldr1 is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.foldr1)).to.equal(true);
      });
    });


    describe('fst', function() {
      it('fst exists', function() {
        expect(funkier).to.have.a.property('fst');
      });


      it('funkierJS\'s fst is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.fst).to.equal(module.fst);
      });


      it('fst is a function', function() {
        expect(funkier.fst).to.be.a('function');
      });


      it('fst has documented arity', function() {
        expect(funkier.arityOf(funkier.fst)).to.equal(1);
      });


      it('fst is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.fst)).to.equal(true);
      });
    });


    describe('getCurrentTimeString', function() {
      it('getCurrentTimeString exists', function() {
        expect(funkier).to.have.a.property('getCurrentTimeString');
      });


      it('funkierJS\'s getCurrentTimeString is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getCurrentTimeString).to.equal(module.getCurrentTimeString);
      });


      it('getCurrentTimeString is a function', function() {
        expect(funkier.getCurrentTimeString).to.be.a('function');
      });


      it('getCurrentTimeString has documented arity', function() {
        expect(funkier.arityOf(funkier.getCurrentTimeString)).to.equal(0);
      });


      it('getCurrentTimeString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getCurrentTimeString)).to.equal(true);
      });
    });


    describe('getDayOfMonth', function() {
      it('getDayOfMonth exists', function() {
        expect(funkier).to.have.a.property('getDayOfMonth');
      });


      it('funkierJS\'s getDayOfMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getDayOfMonth).to.equal(module.getDayOfMonth);
      });


      it('getDayOfMonth is a function', function() {
        expect(funkier.getDayOfMonth).to.be.a('function');
      });


      it('getDayOfMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.getDayOfMonth)).to.equal(1);
      });


      it('getDayOfMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getDayOfMonth)).to.equal(true);
      });
    });


    describe('getDayOfWeek', function() {
      it('getDayOfWeek exists', function() {
        expect(funkier).to.have.a.property('getDayOfWeek');
      });


      it('funkierJS\'s getDayOfWeek is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getDayOfWeek).to.equal(module.getDayOfWeek);
      });


      it('getDayOfWeek is a function', function() {
        expect(funkier.getDayOfWeek).to.be.a('function');
      });


      it('getDayOfWeek has documented arity', function() {
        expect(funkier.arityOf(funkier.getDayOfWeek)).to.equal(1);
      });


      it('getDayOfWeek is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getDayOfWeek)).to.equal(true);
      });
    });


    describe('getErrValue', function() {
      it('getErrValue exists', function() {
        expect(funkier).to.have.a.property('getErrValue');
      });


      it('funkierJS\'s getErrValue is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.getErrValue).to.equal(module.getErrValue);
      });


      it('getErrValue is a function', function() {
        expect(funkier.getErrValue).to.be.a('function');
      });


      it('getErrValue has documented arity', function() {
        expect(funkier.arityOf(funkier.getErrValue)).to.equal(1);
      });


      it('getErrValue is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getErrValue)).to.equal(true);
      });
    });


    describe('getFullYear', function() {
      it('getFullYear exists', function() {
        expect(funkier).to.have.a.property('getFullYear');
      });


      it('funkierJS\'s getFullYear is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getFullYear).to.equal(module.getFullYear);
      });


      it('getFullYear is a function', function() {
        expect(funkier.getFullYear).to.be.a('function');
      });


      it('getFullYear has documented arity', function() {
        expect(funkier.arityOf(funkier.getFullYear)).to.equal(1);
      });


      it('getFullYear is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getFullYear)).to.equal(true);
      });
    });


    describe('getHours', function() {
      it('getHours exists', function() {
        expect(funkier).to.have.a.property('getHours');
      });


      it('funkierJS\'s getHours is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getHours).to.equal(module.getHours);
      });


      it('getHours is a function', function() {
        expect(funkier.getHours).to.be.a('function');
      });


      it('getHours has documented arity', function() {
        expect(funkier.arityOf(funkier.getHours)).to.equal(1);
      });


      it('getHours is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getHours)).to.equal(true);
      });
    });


    describe('getIndex', function() {
      it('getIndex exists', function() {
        expect(funkier).to.have.a.property('getIndex');
      });


      it('funkierJS\'s getIndex is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.getIndex).to.equal(module.getIndex);
      });


      it('getIndex is a function', function() {
        expect(funkier.getIndex).to.be.a('function');
      });


      it('getIndex has documented arity', function() {
        expect(funkier.arityOf(funkier.getIndex)).to.equal(2);
      });


      it('getIndex is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getIndex)).to.equal(true);
      });
    });


    describe('getJustValue', function() {
      it('getJustValue exists', function() {
        expect(funkier).to.have.a.property('getJustValue');
      });


      it('funkierJS\'s getJustValue is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.getJustValue).to.equal(module.getJustValue);
      });


      it('getJustValue is a function', function() {
        expect(funkier.getJustValue).to.be.a('function');
      });


      it('getJustValue has documented arity', function() {
        expect(funkier.arityOf(funkier.getJustValue)).to.equal(1);
      });


      it('getJustValue is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getJustValue)).to.equal(true);
      });
    });


    describe('getMilliseconds', function() {
      it('getMilliseconds exists', function() {
        expect(funkier).to.have.a.property('getMilliseconds');
      });


      it('funkierJS\'s getMilliseconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getMilliseconds).to.equal(module.getMilliseconds);
      });


      it('getMilliseconds is a function', function() {
        expect(funkier.getMilliseconds).to.be.a('function');
      });


      it('getMilliseconds has documented arity', function() {
        expect(funkier.arityOf(funkier.getMilliseconds)).to.equal(1);
      });


      it('getMilliseconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getMilliseconds)).to.equal(true);
      });
    });


    describe('getMinutes', function() {
      it('getMinutes exists', function() {
        expect(funkier).to.have.a.property('getMinutes');
      });


      it('funkierJS\'s getMinutes is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getMinutes).to.equal(module.getMinutes);
      });


      it('getMinutes is a function', function() {
        expect(funkier.getMinutes).to.be.a('function');
      });


      it('getMinutes has documented arity', function() {
        expect(funkier.arityOf(funkier.getMinutes)).to.equal(1);
      });


      it('getMinutes is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getMinutes)).to.equal(true);
      });
    });


    describe('getMonth', function() {
      it('getMonth exists', function() {
        expect(funkier).to.have.a.property('getMonth');
      });


      it('funkierJS\'s getMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getMonth).to.equal(module.getMonth);
      });


      it('getMonth is a function', function() {
        expect(funkier.getMonth).to.be.a('function');
      });


      it('getMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.getMonth)).to.equal(1);
      });


      it('getMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getMonth)).to.equal(true);
      });
    });


    describe('getOkValue', function() {
      it('getOkValue exists', function() {
        expect(funkier).to.have.a.property('getOkValue');
      });


      it('funkierJS\'s getOkValue is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.getOkValue).to.equal(module.getOkValue);
      });


      it('getOkValue is a function', function() {
        expect(funkier.getOkValue).to.be.a('function');
      });


      it('getOkValue has documented arity', function() {
        expect(funkier.arityOf(funkier.getOkValue)).to.equal(1);
      });


      it('getOkValue is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getOkValue)).to.equal(true);
      });
    });


    describe('getOwnPropertyDescriptor', function() {
      it('getOwnPropertyDescriptor exists', function() {
        expect(funkier).to.have.a.property('getOwnPropertyDescriptor');
      });


      it('funkierJS\'s getOwnPropertyDescriptor is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.getOwnPropertyDescriptor).to.equal(module.getOwnPropertyDescriptor);
      });


      it('getOwnPropertyDescriptor is a function', function() {
        expect(funkier.getOwnPropertyDescriptor).to.be.a('function');
      });


      it('getOwnPropertyDescriptor has documented arity', function() {
        expect(funkier.arityOf(funkier.getOwnPropertyDescriptor)).to.equal(2);
      });


      it('getOwnPropertyDescriptor is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getOwnPropertyDescriptor)).to.equal(true);
      });
    });


    describe('getOwnPropertyNames', function() {
      it('getOwnPropertyNames exists', function() {
        expect(funkier).to.have.a.property('getOwnPropertyNames');
      });


      it('funkierJS\'s getOwnPropertyNames is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.getOwnPropertyNames).to.equal(module.getOwnPropertyNames);
      });


      it('getOwnPropertyNames is a function', function() {
        expect(funkier.getOwnPropertyNames).to.be.a('function');
      });


      it('getOwnPropertyNames has documented arity', function() {
        expect(funkier.arityOf(funkier.getOwnPropertyNames)).to.equal(1);
      });


      it('getOwnPropertyNames is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getOwnPropertyNames)).to.equal(true);
      });
    });


    describe('getSeconds', function() {
      it('getSeconds exists', function() {
        expect(funkier).to.have.a.property('getSeconds');
      });


      it('funkierJS\'s getSeconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getSeconds).to.equal(module.getSeconds);
      });


      it('getSeconds is a function', function() {
        expect(funkier.getSeconds).to.be.a('function');
      });


      it('getSeconds has documented arity', function() {
        expect(funkier.arityOf(funkier.getSeconds)).to.equal(1);
      });


      it('getSeconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getSeconds)).to.equal(true);
      });
    });


    describe('getTimezoneOffset', function() {
      it('getTimezoneOffset exists', function() {
        expect(funkier).to.have.a.property('getTimezoneOffset');
      });


      it('funkierJS\'s getTimezoneOffset is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getTimezoneOffset).to.equal(module.getTimezoneOffset);
      });


      it('getTimezoneOffset is a function', function() {
        expect(funkier.getTimezoneOffset).to.be.a('function');
      });


      it('getTimezoneOffset has documented arity', function() {
        expect(funkier.arityOf(funkier.getTimezoneOffset)).to.equal(1);
      });


      it('getTimezoneOffset is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getTimezoneOffset)).to.equal(true);
      });
    });


    describe('getType', function() {
      it('getType exists', function() {
        expect(funkier).to.have.a.property('getType');
      });


      it('funkierJS\'s getType is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.getType).to.equal(module.getType);
      });


      it('getType is a function', function() {
        expect(funkier.getType).to.be.a('function');
      });


      it('getType has documented arity', function() {
        expect(funkier.arityOf(funkier.getType)).to.equal(1);
      });


      it('getType is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getType)).to.equal(true);
      });
    });


    describe('getUTCDayOfMonth', function() {
      it('getUTCDayOfMonth exists', function() {
        expect(funkier).to.have.a.property('getUTCDayOfMonth');
      });


      it('funkierJS\'s getUTCDayOfMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCDayOfMonth).to.equal(module.getUTCDayOfMonth);
      });


      it('getUTCDayOfMonth is a function', function() {
        expect(funkier.getUTCDayOfMonth).to.be.a('function');
      });


      it('getUTCDayOfMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCDayOfMonth)).to.equal(1);
      });


      it('getUTCDayOfMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCDayOfMonth)).to.equal(true);
      });
    });


    describe('getUTCDayOfWeek', function() {
      it('getUTCDayOfWeek exists', function() {
        expect(funkier).to.have.a.property('getUTCDayOfWeek');
      });


      it('funkierJS\'s getUTCDayOfWeek is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCDayOfWeek).to.equal(module.getUTCDayOfWeek);
      });


      it('getUTCDayOfWeek is a function', function() {
        expect(funkier.getUTCDayOfWeek).to.be.a('function');
      });


      it('getUTCDayOfWeek has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCDayOfWeek)).to.equal(1);
      });


      it('getUTCDayOfWeek is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCDayOfWeek)).to.equal(true);
      });
    });


    describe('getUTCFullYear', function() {
      it('getUTCFullYear exists', function() {
        expect(funkier).to.have.a.property('getUTCFullYear');
      });


      it('funkierJS\'s getUTCFullYear is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCFullYear).to.equal(module.getUTCFullYear);
      });


      it('getUTCFullYear is a function', function() {
        expect(funkier.getUTCFullYear).to.be.a('function');
      });


      it('getUTCFullYear has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCFullYear)).to.equal(1);
      });


      it('getUTCFullYear is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCFullYear)).to.equal(true);
      });
    });


    describe('getUTCHours', function() {
      it('getUTCHours exists', function() {
        expect(funkier).to.have.a.property('getUTCHours');
      });


      it('funkierJS\'s getUTCHours is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCHours).to.equal(module.getUTCHours);
      });


      it('getUTCHours is a function', function() {
        expect(funkier.getUTCHours).to.be.a('function');
      });


      it('getUTCHours has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCHours)).to.equal(1);
      });


      it('getUTCHours is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCHours)).to.equal(true);
      });
    });


    describe('getUTCMilliseconds', function() {
      it('getUTCMilliseconds exists', function() {
        expect(funkier).to.have.a.property('getUTCMilliseconds');
      });


      it('funkierJS\'s getUTCMilliseconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCMilliseconds).to.equal(module.getUTCMilliseconds);
      });


      it('getUTCMilliseconds is a function', function() {
        expect(funkier.getUTCMilliseconds).to.be.a('function');
      });


      it('getUTCMilliseconds has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCMilliseconds)).to.equal(1);
      });


      it('getUTCMilliseconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCMilliseconds)).to.equal(true);
      });
    });


    describe('getUTCMinutes', function() {
      it('getUTCMinutes exists', function() {
        expect(funkier).to.have.a.property('getUTCMinutes');
      });


      it('funkierJS\'s getUTCMinutes is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCMinutes).to.equal(module.getUTCMinutes);
      });


      it('getUTCMinutes is a function', function() {
        expect(funkier.getUTCMinutes).to.be.a('function');
      });


      it('getUTCMinutes has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCMinutes)).to.equal(1);
      });


      it('getUTCMinutes is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCMinutes)).to.equal(true);
      });
    });


    describe('getUTCMonth', function() {
      it('getUTCMonth exists', function() {
        expect(funkier).to.have.a.property('getUTCMonth');
      });


      it('funkierJS\'s getUTCMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCMonth).to.equal(module.getUTCMonth);
      });


      it('getUTCMonth is a function', function() {
        expect(funkier.getUTCMonth).to.be.a('function');
      });


      it('getUTCMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCMonth)).to.equal(1);
      });


      it('getUTCMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCMonth)).to.equal(true);
      });
    });


    describe('getUTCSeconds', function() {
      it('getUTCSeconds exists', function() {
        expect(funkier).to.have.a.property('getUTCSeconds');
      });


      it('funkierJS\'s getUTCSeconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.getUTCSeconds).to.equal(module.getUTCSeconds);
      });


      it('getUTCSeconds is a function', function() {
        expect(funkier.getUTCSeconds).to.be.a('function');
      });


      it('getUTCSeconds has documented arity', function() {
        expect(funkier.arityOf(funkier.getUTCSeconds)).to.equal(1);
      });


      it('getUTCSeconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.getUTCSeconds)).to.equal(true);
      });
    });


    describe('greaterThan', function() {
      it('greaterThan exists', function() {
        expect(funkier).to.have.a.property('greaterThan');
      });


      it('funkierJS\'s greaterThan is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.greaterThan).to.equal(module.greaterThan);
      });


      it('greaterThan is a function', function() {
        expect(funkier.greaterThan).to.be.a('function');
      });


      it('greaterThan has documented arity', function() {
        expect(funkier.arityOf(funkier.greaterThan)).to.equal(2);
      });


      it('greaterThan is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.greaterThan)).to.equal(true);
      });
    });


    describe('greaterThanEqual', function() {
      it('greaterThanEqual exists', function() {
        expect(funkier).to.have.a.property('greaterThanEqual');
      });


      it('funkierJS\'s greaterThanEqual is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.greaterThanEqual).to.equal(module.greaterThanEqual);
      });


      it('greaterThanEqual is a function', function() {
        expect(funkier.greaterThanEqual).to.be.a('function');
      });


      it('greaterThanEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.greaterThanEqual)).to.equal(2);
      });


      it('greaterThanEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.greaterThanEqual)).to.equal(true);
      });
    });


    describe('gt', function() {
      it('gt exists', function() {
        expect(funkier).to.have.a.property('gt');
      });


      it('gt is a synonym for greaterThan', function() {
        expect(funkier.gt).to.equal(funkier.greaterThan);
      });
    });


    describe('gte', function() {
      it('gte exists', function() {
        expect(funkier).to.have.a.property('gte');
      });


      it('gte is a synonym for greaterThanEqual', function() {
        expect(funkier.gte).to.equal(funkier.greaterThanEqual);
      });
    });


    describe('hasOwnProperty', function() {
      it('hasOwnProperty exists', function() {
        expect(funkier).to.have.a.property('hasOwnProperty');
      });


      it('funkierJS\'s hasOwnProperty is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.hasOwnProperty).to.equal(module.hasOwnProperty);
      });


      it('hasOwnProperty is a function', function() {
        expect(funkier.hasOwnProperty).to.be.a('function');
      });


      it('hasOwnProperty has documented arity', function() {
        expect(funkier.arityOf(funkier.hasOwnProperty)).to.equal(2);
      });


      it('hasOwnProperty is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.hasOwnProperty)).to.equal(true);
      });
    });


    describe('hasProperty', function() {
      it('hasProperty exists', function() {
        expect(funkier).to.have.a.property('hasProperty');
      });


      it('funkierJS\'s hasProperty is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.hasProperty).to.equal(module.hasProperty);
      });


      it('hasProperty is a function', function() {
        expect(funkier.hasProperty).to.be.a('function');
      });


      it('hasProperty has documented arity', function() {
        expect(funkier.arityOf(funkier.hasProperty)).to.equal(2);
      });


      it('hasProperty is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.hasProperty)).to.equal(true);
      });
    });


    describe('hasType', function() {
      it('hasType exists', function() {
        expect(funkier).to.have.a.property('hasType');
      });


      it('hasType is a synonym for is', function() {
        expect(funkier.hasType).to.equal(funkier.is);
      });
    });


    describe('head', function() {
      it('head exists', function() {
        expect(funkier).to.have.a.property('head');
      });


      it('funkierJS\'s head is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.head).to.equal(module.head);
      });


      it('head is a function', function() {
        expect(funkier.head).to.be.a('function');
      });


      it('head has documented arity', function() {
        expect(funkier.arityOf(funkier.head)).to.equal(1);
      });


      it('head is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.head)).to.equal(true);
      });
    });


    describe('id', function() {
      it('id exists', function() {
        expect(funkier).to.have.a.property('id');
      });


      it('funkierJS\'s id is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.id).to.equal(module.id);
      });


      it('id is a function', function() {
        expect(funkier.id).to.be.a('function');
      });


      it('id has documented arity', function() {
        expect(funkier.arityOf(funkier.id)).to.equal(1);
      });


      it('id is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.id)).to.equal(true);
      });
    });


    describe('init', function() {
      it('init exists', function() {
        expect(funkier).to.have.a.property('init');
      });


      it('funkierJS\'s init is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.init).to.equal(module.init);
      });


      it('init is a function', function() {
        expect(funkier.init).to.be.a('function');
      });


      it('init has documented arity', function() {
        expect(funkier.arityOf(funkier.init)).to.equal(1);
      });


      it('init is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.init)).to.equal(true);
      });
    });


    describe('inits', function() {
      it('inits exists', function() {
        expect(funkier).to.have.a.property('inits');
      });


      it('funkierJS\'s inits is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.inits).to.equal(module.inits);
      });


      it('inits is a function', function() {
        expect(funkier.inits).to.be.a('function');
      });


      it('inits has documented arity', function() {
        expect(funkier.arityOf(funkier.inits)).to.equal(1);
      });


      it('inits is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.inits)).to.equal(true);
      });
    });


    describe('instanceOf', function() {
      it('instanceOf exists', function() {
        expect(funkier).to.have.a.property('instanceOf');
      });


      it('funkierJS\'s instanceOf is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.instanceOf).to.equal(module.instanceOf);
      });


      it('instanceOf is a function', function() {
        expect(funkier.instanceOf).to.be.a('function');
      });


      it('instanceOf has documented arity', function() {
        expect(funkier.arityOf(funkier.instanceOf)).to.equal(2);
      });


      it('instanceOf is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.instanceOf)).to.equal(true);
      });
    });


    describe('intersperse', function() {
      it('intersperse exists', function() {
        expect(funkier).to.have.a.property('intersperse');
      });


      it('funkierJS\'s intersperse is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.intersperse).to.equal(module.intersperse);
      });


      it('intersperse is a function', function() {
        expect(funkier.intersperse).to.be.a('function');
      });


      it('intersperse has documented arity', function() {
        expect(funkier.arityOf(funkier.intersperse)).to.equal(2);
      });


      it('intersperse is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.intersperse)).to.equal(true);
      });
    });


    describe('is', function() {
      it('is exists', function() {
        expect(funkier).to.have.a.property('is');
      });


      it('funkierJS\'s is is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.is).to.equal(module.is);
      });


      it('is is a function', function() {
        expect(funkier.is).to.be.a('function');
      });


      it('is has documented arity', function() {
        expect(funkier.arityOf(funkier.is)).to.equal(2);
      });


      it('is is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.is)).to.equal(true);
      });
    });


    describe('isArray', function() {
      it('isArray exists', function() {
        expect(funkier).to.have.a.property('isArray');
      });


      it('funkierJS\'s isArray is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isArray).to.equal(module.isArray);
      });


      it('isArray is a function', function() {
        expect(funkier.isArray).to.be.a('function');
      });


      it('isArray has documented arity', function() {
        expect(funkier.arityOf(funkier.isArray)).to.equal(1);
      });


      it('isArray is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isArray)).to.equal(true);
      });
    });


    describe('isBoolean', function() {
      it('isBoolean exists', function() {
        expect(funkier).to.have.a.property('isBoolean');
      });


      it('funkierJS\'s isBoolean is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isBoolean).to.equal(module.isBoolean);
      });


      it('isBoolean is a function', function() {
        expect(funkier.isBoolean).to.be.a('function');
      });


      it('isBoolean has documented arity', function() {
        expect(funkier.arityOf(funkier.isBoolean)).to.equal(1);
      });


      it('isBoolean is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isBoolean)).to.equal(true);
      });
    });


    describe('isEmpty', function() {
      it('isEmpty exists', function() {
        expect(funkier).to.have.a.property('isEmpty');
      });


      it('funkierJS\'s isEmpty is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.isEmpty).to.equal(module.isEmpty);
      });


      it('isEmpty is a function', function() {
        expect(funkier.isEmpty).to.be.a('function');
      });


      it('isEmpty has documented arity', function() {
        expect(funkier.arityOf(funkier.isEmpty)).to.equal(1);
      });


      it('isEmpty is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isEmpty)).to.equal(true);
      });
    });


    describe('isErr', function() {
      it('isErr exists', function() {
        expect(funkier).to.have.a.property('isErr');
      });


      it('funkierJS\'s isErr is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.isErr).to.equal(module.isErr);
      });


      it('isErr is a function', function() {
        expect(funkier.isErr).to.be.a('function');
      });


      it('isErr has documented arity', function() {
        expect(funkier.arityOf(funkier.isErr)).to.equal(1);
      });


      it('isErr is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isErr)).to.equal(true);
      });
    });


    describe('isJust', function() {
      it('isJust exists', function() {
        expect(funkier).to.have.a.property('isJust');
      });


      it('funkierJS\'s isJust is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.isJust).to.equal(module.isJust);
      });


      it('isJust is a function', function() {
        expect(funkier.isJust).to.be.a('function');
      });


      it('isJust has documented arity', function() {
        expect(funkier.arityOf(funkier.isJust)).to.equal(1);
      });


      it('isJust is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isJust)).to.equal(true);
      });
    });


    describe('isMaybe', function() {
      it('isMaybe exists', function() {
        expect(funkier).to.have.a.property('isMaybe');
      });


      it('funkierJS\'s isMaybe is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.isMaybe).to.equal(module.isMaybe);
      });


      it('isMaybe is a function', function() {
        expect(funkier.isMaybe).to.be.a('function');
      });


      it('isMaybe has documented arity', function() {
        expect(funkier.arityOf(funkier.isMaybe)).to.equal(1);
      });


      it('isMaybe is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isMaybe)).to.equal(true);
      });
    });


    describe('isNothing', function() {
      it('isNothing exists', function() {
        expect(funkier).to.have.a.property('isNothing');
      });


      it('funkierJS\'s isNothing is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.isNothing).to.equal(module.isNothing);
      });


      it('isNothing is a function', function() {
        expect(funkier.isNothing).to.be.a('function');
      });


      it('isNothing has documented arity', function() {
        expect(funkier.arityOf(funkier.isNothing)).to.equal(1);
      });


      it('isNothing is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isNothing)).to.equal(true);
      });
    });


    describe('isNull', function() {
      it('isNull exists', function() {
        expect(funkier).to.have.a.property('isNull');
      });


      it('funkierJS\'s isNull is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isNull).to.equal(module.isNull);
      });


      it('isNull is a function', function() {
        expect(funkier.isNull).to.be.a('function');
      });


      it('isNull has documented arity', function() {
        expect(funkier.arityOf(funkier.isNull)).to.equal(1);
      });


      it('isNull is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isNull)).to.equal(true);
      });
    });


    describe('isNumber', function() {
      it('isNumber exists', function() {
        expect(funkier).to.have.a.property('isNumber');
      });


      it('funkierJS\'s isNumber is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isNumber).to.equal(module.isNumber);
      });


      it('isNumber is a function', function() {
        expect(funkier.isNumber).to.be.a('function');
      });


      it('isNumber has documented arity', function() {
        expect(funkier.arityOf(funkier.isNumber)).to.equal(1);
      });


      it('isNumber is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isNumber)).to.equal(true);
      });
    });


    describe('isObject', function() {
      it('isObject exists', function() {
        expect(funkier).to.have.a.property('isObject');
      });


      it('funkierJS\'s isObject is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isObject).to.equal(module.isObject);
      });


      it('isObject is a function', function() {
        expect(funkier.isObject).to.be.a('function');
      });


      it('isObject has documented arity', function() {
        expect(funkier.arityOf(funkier.isObject)).to.equal(1);
      });


      it('isObject is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isObject)).to.equal(true);
      });
    });


    describe('isOk', function() {
      it('isOk exists', function() {
        expect(funkier).to.have.a.property('isOk');
      });


      it('funkierJS\'s isOk is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.isOk).to.equal(module.isOk);
      });


      it('isOk is a function', function() {
        expect(funkier.isOk).to.be.a('function');
      });


      it('isOk has documented arity', function() {
        expect(funkier.arityOf(funkier.isOk)).to.equal(1);
      });


      it('isOk is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isOk)).to.equal(true);
      });
    });


    describe('isPair', function() {
      it('isPair exists', function() {
        expect(funkier).to.have.a.property('isPair');
      });


      it('funkierJS\'s isPair is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.isPair).to.equal(module.isPair);
      });


      it('isPair is a function', function() {
        expect(funkier.isPair).to.be.a('function');
      });


      it('isPair has documented arity', function() {
        expect(funkier.arityOf(funkier.isPair)).to.equal(1);
      });


      it('isPair is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isPair)).to.equal(true);
      });
    });


    describe('isPrototypeOf', function() {
      it('isPrototypeOf exists', function() {
        expect(funkier).to.have.a.property('isPrototypeOf');
      });


      it('funkierJS\'s isPrototypeOf is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.isPrototypeOf).to.equal(module.isPrototypeOf);
      });


      it('isPrototypeOf is a function', function() {
        expect(funkier.isPrototypeOf).to.be.a('function');
      });


      it('isPrototypeOf has documented arity', function() {
        expect(funkier.arityOf(funkier.isPrototypeOf)).to.equal(2);
      });


      it('isPrototypeOf is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isPrototypeOf)).to.equal(true);
      });
    });


    describe('isRealObject', function() {
      it('isRealObject exists', function() {
        expect(funkier).to.have.a.property('isRealObject');
      });


      it('funkierJS\'s isRealObject is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isRealObject).to.equal(module.isRealObject);
      });


      it('isRealObject is a function', function() {
        expect(funkier.isRealObject).to.be.a('function');
      });


      it('isRealObject has documented arity', function() {
        expect(funkier.arityOf(funkier.isRealObject)).to.equal(1);
      });


      it('isRealObject is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isRealObject)).to.equal(true);
      });
    });


    describe('isResult', function() {
      it('isResult exists', function() {
        expect(funkier).to.have.a.property('isResult');
      });


      it('funkierJS\'s isResult is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.isResult).to.equal(module.isResult);
      });


      it('isResult is a function', function() {
        expect(funkier.isResult).to.be.a('function');
      });


      it('isResult has documented arity', function() {
        expect(funkier.arityOf(funkier.isResult)).to.equal(1);
      });


      it('isResult is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isResult)).to.equal(true);
      });
    });


    describe('isString', function() {
      it('isString exists', function() {
        expect(funkier).to.have.a.property('isString');
      });


      it('funkierJS\'s isString is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isString).to.equal(module.isString);
      });


      it('isString is a function', function() {
        expect(funkier.isString).to.be.a('function');
      });


      it('isString has documented arity', function() {
        expect(funkier.arityOf(funkier.isString)).to.equal(1);
      });


      it('isString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isString)).to.equal(true);
      });
    });


    describe('isUndefined', function() {
      it('isUndefined exists', function() {
        expect(funkier).to.have.a.property('isUndefined');
      });


      it('funkierJS\'s isUndefined is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.isUndefined).to.equal(module.isUndefined);
      });


      it('isUndefined is a function', function() {
        expect(funkier.isUndefined).to.be.a('function');
      });


      it('isUndefined has documented arity', function() {
        expect(funkier.arityOf(funkier.isUndefined)).to.equal(1);
      });


      it('isUndefined is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.isUndefined)).to.equal(true);
      });
    });


    describe('join', function() {
      it('join exists', function() {
        expect(funkier).to.have.a.property('join');
      });


      it('funkierJS\'s join is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.join).to.equal(module.join);
      });


      it('join is a function', function() {
        expect(funkier.join).to.be.a('function');
      });


      it('join has documented arity', function() {
        expect(funkier.arityOf(funkier.join)).to.equal(2);
      });


      it('join is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.join)).to.equal(true);
      });
    });


    describe('keyValues', function() {
      it('keyValues exists', function() {
        expect(funkier).to.have.a.property('keyValues');
      });


      it('funkierJS\'s keyValues is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.keyValues).to.equal(module.keyValues);
      });


      it('keyValues is a function', function() {
        expect(funkier.keyValues).to.be.a('function');
      });


      it('keyValues has documented arity', function() {
        expect(funkier.arityOf(funkier.keyValues)).to.equal(1);
      });


      it('keyValues is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.keyValues)).to.equal(true);
      });
    });


    describe('keys', function() {
      it('keys exists', function() {
        expect(funkier).to.have.a.property('keys');
      });


      it('funkierJS\'s keys is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.keys).to.equal(module.keys);
      });


      it('keys is a function', function() {
        expect(funkier.keys).to.be.a('function');
      });


      it('keys has documented arity', function() {
        expect(funkier.arityOf(funkier.keys)).to.equal(1);
      });


      it('keys is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.keys)).to.equal(true);
      });
    });


    describe('last', function() {
      it('last exists', function() {
        expect(funkier).to.have.a.property('last');
      });


      it('funkierJS\'s last is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.last).to.equal(module.last);
      });


      it('last is a function', function() {
        expect(funkier.last).to.be.a('function');
      });


      it('last has documented arity', function() {
        expect(funkier.arityOf(funkier.last)).to.equal(1);
      });


      it('last is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.last)).to.equal(true);
      });
    });


    describe('leftShift', function() {
      it('leftShift exists', function() {
        expect(funkier).to.have.a.property('leftShift');
      });


      it('funkierJS\'s leftShift is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.leftShift).to.equal(module.leftShift);
      });


      it('leftShift is a function', function() {
        expect(funkier.leftShift).to.be.a('function');
      });


      it('leftShift has documented arity', function() {
        expect(funkier.arityOf(funkier.leftShift)).to.equal(2);
      });


      it('leftShift is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.leftShift)).to.equal(true);
      });
    });


    describe('length', function() {
      it('length exists', function() {
        expect(funkier).to.have.a.property('length');
      });


      it('funkierJS\'s length is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.length).to.equal(module.length);
      });


      it('length is a function', function() {
        expect(funkier.length).to.be.a('function');
      });


      it('length has documented arity', function() {
        expect(funkier.arityOf(funkier.length)).to.equal(1);
      });


      it('length is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.length)).to.equal(true);
      });
    });


    describe('lessThan', function() {
      it('lessThan exists', function() {
        expect(funkier).to.have.a.property('lessThan');
      });


      it('funkierJS\'s lessThan is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.lessThan).to.equal(module.lessThan);
      });


      it('lessThan is a function', function() {
        expect(funkier.lessThan).to.be.a('function');
      });


      it('lessThan has documented arity', function() {
        expect(funkier.arityOf(funkier.lessThan)).to.equal(2);
      });


      it('lessThan is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.lessThan)).to.equal(true);
      });
    });


    describe('lessThanEqual', function() {
      it('lessThanEqual exists', function() {
        expect(funkier).to.have.a.property('lessThanEqual');
      });


      it('funkierJS\'s lessThanEqual is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.lessThanEqual).to.equal(module.lessThanEqual);
      });


      it('lessThanEqual is a function', function() {
        expect(funkier.lessThanEqual).to.be.a('function');
      });


      it('lessThanEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.lessThanEqual)).to.equal(2);
      });


      it('lessThanEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.lessThanEqual)).to.equal(true);
      });
    });


    describe('log', function() {
      it('log exists', function() {
        expect(funkier).to.have.a.property('log');
      });


      it('funkierJS\'s log is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.log).to.equal(module.log);
      });


      it('log is a function', function() {
        expect(funkier.log).to.be.a('function');
      });


      it('log has documented arity', function() {
        expect(funkier.arityOf(funkier.log)).to.equal(2);
      });


      it('log is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.log)).to.equal(true);
      });
    });


    describe('lt', function() {
      it('lt exists', function() {
        expect(funkier).to.have.a.property('lt');
      });


      it('lt is a synonym for lessThan', function() {
        expect(funkier.lt).to.equal(funkier.lessThan);
      });
    });


    describe('lte', function() {
      it('lte exists', function() {
        expect(funkier).to.have.a.property('lte');
      });


      it('lte is a synonym for lessThanEqual', function() {
        expect(funkier.lte).to.equal(funkier.lessThanEqual);
      });
    });


    describe('makeDateFromMilliseconds', function() {
      it('makeDateFromMilliseconds exists', function() {
        expect(funkier).to.have.a.property('makeDateFromMilliseconds');
      });


      it('funkierJS\'s makeDateFromMilliseconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeDateFromMilliseconds).to.equal(module.makeDateFromMilliseconds);
      });


      it('makeDateFromMilliseconds is a function', function() {
        expect(funkier.makeDateFromMilliseconds).to.be.a('function');
      });


      it('makeDateFromMilliseconds has documented arity', function() {
        expect(funkier.arityOf(funkier.makeDateFromMilliseconds)).to.equal(1);
      });


      it('makeDateFromMilliseconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeDateFromMilliseconds)).to.equal(true);
      });
    });


    describe('makeDateFromString', function() {
      it('makeDateFromString exists', function() {
        expect(funkier).to.have.a.property('makeDateFromString');
      });


      it('funkierJS\'s makeDateFromString is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeDateFromString).to.equal(module.makeDateFromString);
      });


      it('makeDateFromString is a function', function() {
        expect(funkier.makeDateFromString).to.be.a('function');
      });


      it('makeDateFromString has documented arity', function() {
        expect(funkier.arityOf(funkier.makeDateFromString)).to.equal(1);
      });


      it('makeDateFromString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeDateFromString)).to.equal(true);
      });
    });


    describe('makeDayDate', function() {
      it('makeDayDate exists', function() {
        expect(funkier).to.have.a.property('makeDayDate');
      });


      it('funkierJS\'s makeDayDate is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeDayDate).to.equal(module.makeDayDate);
      });


      it('makeDayDate is a function', function() {
        expect(funkier.makeDayDate).to.be.a('function');
      });


      it('makeDayDate has documented arity', function() {
        expect(funkier.arityOf(funkier.makeDayDate)).to.equal(3);
      });


      it('makeDayDate is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeDayDate)).to.equal(true);
      });
    });


    describe('makeHourDate', function() {
      it('makeHourDate exists', function() {
        expect(funkier).to.have.a.property('makeHourDate');
      });


      it('funkierJS\'s makeHourDate is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeHourDate).to.equal(module.makeHourDate);
      });


      it('makeHourDate is a function', function() {
        expect(funkier.makeHourDate).to.be.a('function');
      });


      it('makeHourDate has documented arity', function() {
        expect(funkier.arityOf(funkier.makeHourDate)).to.equal(4);
      });


      it('makeHourDate is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeHourDate)).to.equal(true);
      });
    });


    describe('makeMaybeReturner', function() {
      it('makeMaybeReturner exists', function() {
        expect(funkier).to.have.a.property('makeMaybeReturner');
      });


      it('funkierJS\'s makeMaybeReturner is indeed the documented value', function() {
        var module = require('../../lib/components/maybe');
        expect(funkier.makeMaybeReturner).to.equal(module.makeMaybeReturner);
      });


      it('makeMaybeReturner is a function', function() {
        expect(funkier.makeMaybeReturner).to.be.a('function');
      });


      it('makeMaybeReturner has documented arity', function() {
        expect(funkier.arityOf(funkier.makeMaybeReturner)).to.equal(1);
      });


      it('makeMaybeReturner is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeMaybeReturner)).to.equal(true);
      });
    });


    describe('makeMillisecondDate', function() {
      it('makeMillisecondDate exists', function() {
        expect(funkier).to.have.a.property('makeMillisecondDate');
      });


      it('funkierJS\'s makeMillisecondDate is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeMillisecondDate).to.equal(module.makeMillisecondDate);
      });


      it('makeMillisecondDate is a function', function() {
        expect(funkier.makeMillisecondDate).to.be.a('function');
      });


      it('makeMillisecondDate has documented arity', function() {
        expect(funkier.arityOf(funkier.makeMillisecondDate)).to.equal(7);
      });


      it('makeMillisecondDate is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeMillisecondDate)).to.equal(true);
      });
    });


    describe('makeMinuteDate', function() {
      it('makeMinuteDate exists', function() {
        expect(funkier).to.have.a.property('makeMinuteDate');
      });


      it('funkierJS\'s makeMinuteDate is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeMinuteDate).to.equal(module.makeMinuteDate);
      });


      it('makeMinuteDate is a function', function() {
        expect(funkier.makeMinuteDate).to.be.a('function');
      });


      it('makeMinuteDate has documented arity', function() {
        expect(funkier.arityOf(funkier.makeMinuteDate)).to.equal(5);
      });


      it('makeMinuteDate is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeMinuteDate)).to.equal(true);
      });
    });


    describe('makeMonthDate', function() {
      it('makeMonthDate exists', function() {
        expect(funkier).to.have.a.property('makeMonthDate');
      });


      it('funkierJS\'s makeMonthDate is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeMonthDate).to.equal(module.makeMonthDate);
      });


      it('makeMonthDate is a function', function() {
        expect(funkier.makeMonthDate).to.be.a('function');
      });


      it('makeMonthDate has documented arity', function() {
        expect(funkier.arityOf(funkier.makeMonthDate)).to.equal(2);
      });


      it('makeMonthDate is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeMonthDate)).to.equal(true);
      });
    });


    describe('makeResultReturner', function() {
      it('makeResultReturner exists', function() {
        expect(funkier).to.have.a.property('makeResultReturner');
      });


      it('funkierJS\'s makeResultReturner is indeed the documented value', function() {
        var module = require('../../lib/components/result');
        expect(funkier.makeResultReturner).to.equal(module.makeResultReturner);
      });


      it('makeResultReturner is a function', function() {
        expect(funkier.makeResultReturner).to.be.a('function');
      });


      it('makeResultReturner has documented arity', function() {
        expect(funkier.arityOf(funkier.makeResultReturner)).to.equal(1);
      });


      it('makeResultReturner is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeResultReturner)).to.equal(true);
      });
    });


    describe('makeSecondDate', function() {
      it('makeSecondDate exists', function() {
        expect(funkier).to.have.a.property('makeSecondDate');
      });


      it('funkierJS\'s makeSecondDate is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.makeSecondDate).to.equal(module.makeSecondDate);
      });


      it('makeSecondDate is a function', function() {
        expect(funkier.makeSecondDate).to.be.a('function');
      });


      it('makeSecondDate has documented arity', function() {
        expect(funkier.arityOf(funkier.makeSecondDate)).to.equal(6);
      });


      it('makeSecondDate is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.makeSecondDate)).to.equal(true);
      });
    });


    describe('map', function() {
      it('map exists', function() {
        expect(funkier).to.have.a.property('map');
      });


      it('funkierJS\'s map is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.map).to.equal(module.map);
      });


      it('map is a function', function() {
        expect(funkier.map).to.be.a('function');
      });


      it('map has documented arity', function() {
        expect(funkier.arityOf(funkier.map)).to.equal(2);
      });


      it('map is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.map)).to.equal(true);
      });
    });


    describe('matches', function() {
      it('matches exists', function() {
        expect(funkier).to.have.a.property('matches');
      });


      it('funkierJS\'s matches is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.matches).to.equal(module.matches);
      });


      it('matches is a function', function() {
        expect(funkier.matches).to.be.a('function');
      });


      it('matches has documented arity', function() {
        expect(funkier.arityOf(funkier.matches)).to.equal(2);
      });


      it('matches is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.matches)).to.equal(true);
      });
    });


    describe('matchesFrom', function() {
      it('matchesFrom exists', function() {
        expect(funkier).to.have.a.property('matchesFrom');
      });


      it('funkierJS\'s matchesFrom is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.matchesFrom).to.equal(module.matchesFrom);
      });


      it('matchesFrom is a function', function() {
        expect(funkier.matchesFrom).to.be.a('function');
      });


      it('matchesFrom has documented arity', function() {
        expect(funkier.arityOf(funkier.matchesFrom)).to.equal(3);
      });


      it('matchesFrom is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.matchesFrom)).to.equal(true);
      });
    });


    describe('max', function() {
      it('max exists', function() {
        expect(funkier).to.have.a.property('max');
      });


      it('funkierJS\'s max is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.max).to.equal(module.max);
      });


      it('max is a function', function() {
        expect(funkier.max).to.be.a('function');
      });


      it('max has documented arity', function() {
        expect(funkier.arityOf(funkier.max)).to.equal(2);
      });


      it('max is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.max)).to.equal(true);
      });
    });


    describe('maximum', function() {
      it('maximum exists', function() {
        expect(funkier).to.have.a.property('maximum');
      });


      it('funkierJS\'s maximum is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.maximum).to.equal(module.maximum);
      });


      it('maximum is a function', function() {
        expect(funkier.maximum).to.be.a('function');
      });


      it('maximum has documented arity', function() {
        expect(funkier.arityOf(funkier.maximum)).to.equal(1);
      });


      it('maximum is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.maximum)).to.equal(true);
      });
    });


    describe('maybeCreate', function() {
      it('maybeCreate exists', function() {
        expect(funkier).to.have.a.property('maybeCreate');
      });


      it('maybeCreate is a synonym for safeCreateProp', function() {
        expect(funkier.maybeCreate).to.equal(funkier.safeCreateProp);
      });
    });


    describe('maybeDelete', function() {
      it('maybeDelete exists', function() {
        expect(funkier).to.have.a.property('maybeDelete');
      });


      it('maybeDelete is a synonym for safeDeleteProp', function() {
        expect(funkier.maybeDelete).to.equal(funkier.safeDeleteProp);
      });
    });


    describe('maybeExtract', function() {
      it('maybeExtract exists', function() {
        expect(funkier).to.have.a.property('maybeExtract');
      });


      it('funkierJS\'s maybeExtract is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.maybeExtract).to.equal(module.maybeExtract);
      });


      it('maybeExtract is a function', function() {
        expect(funkier.maybeExtract).to.be.a('function');
      });


      it('maybeExtract has documented arity', function() {
        expect(funkier.arityOf(funkier.maybeExtract)).to.equal(2);
      });


      it('maybeExtract is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.maybeExtract)).to.equal(true);
      });
    });


    describe('maybeModify', function() {
      it('maybeModify exists', function() {
        expect(funkier).to.have.a.property('maybeModify');
      });


      it('maybeModify is a synonym for safeModify', function() {
        expect(funkier.maybeModify).to.equal(funkier.safeModify);
      });
    });


    describe('maybeModifyProp', function() {
      it('maybeModifyProp exists', function() {
        expect(funkier).to.have.a.property('maybeModifyProp');
      });


      it('maybeModifyProp is a synonym for safeModify', function() {
        expect(funkier.maybeModifyProp).to.equal(funkier.safeModify);
      });
    });


    describe('maybeSet', function() {
      it('maybeSet exists', function() {
        expect(funkier).to.have.a.property('maybeSet');
      });


      it('maybeSet is a synonym for safeSet', function() {
        expect(funkier.maybeSet).to.equal(funkier.safeSet);
      });
    });


    describe('maybeSetProp', function() {
      it('maybeSetProp exists', function() {
        expect(funkier).to.have.a.property('maybeSetProp');
      });


      it('maybeSetProp is a synonym for safeSet', function() {
        expect(funkier.maybeSetProp).to.equal(funkier.safeSet);
      });
    });


    describe('maybeTap', function() {
      it('maybeTap exists', function() {
        expect(funkier).to.have.a.property('maybeTap');
      });


      it('maybeTap is a synonym for maybeExtract', function() {
        expect(funkier.maybeTap).to.equal(funkier.maybeExtract);
      });
    });


    describe('min', function() {
      it('min exists', function() {
        expect(funkier).to.have.a.property('min');
      });


      it('funkierJS\'s min is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.min).to.equal(module.min);
      });


      it('min is a function', function() {
        expect(funkier.min).to.be.a('function');
      });


      it('min has documented arity', function() {
        expect(funkier.arityOf(funkier.min)).to.equal(2);
      });


      it('min is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.min)).to.equal(true);
      });
    });


    describe('minimum', function() {
      it('minimum exists', function() {
        expect(funkier).to.have.a.property('minimum');
      });


      it('funkierJS\'s minimum is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.minimum).to.equal(module.minimum);
      });


      it('minimum is a function', function() {
        expect(funkier.minimum).to.be.a('function');
      });


      it('minimum has documented arity', function() {
        expect(funkier.arityOf(funkier.minimum)).to.equal(1);
      });


      it('minimum is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.minimum)).to.equal(true);
      });
    });


    describe('modify', function() {
      it('modify exists', function() {
        expect(funkier).to.have.a.property('modify');
      });


      it('funkierJS\'s modify is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.modify).to.equal(module.modify);
      });


      it('modify is a function', function() {
        expect(funkier.modify).to.be.a('function');
      });


      it('modify has documented arity', function() {
        expect(funkier.arityOf(funkier.modify)).to.equal(3);
      });


      it('modify is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.modify)).to.equal(true);
      });
    });


    describe('modifyProp', function() {
      it('modifyProp exists', function() {
        expect(funkier).to.have.a.property('modifyProp');
      });


      it('modifyProp is a synonym for modify', function() {
        expect(funkier.modifyProp).to.equal(funkier.modify);
      });
    });


    describe('multiply', function() {
      it('multiply exists', function() {
        expect(funkier).to.have.a.property('multiply');
      });


      it('funkierJS\'s multiply is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.multiply).to.equal(module.multiply);
      });


      it('multiply is a function', function() {
        expect(funkier.multiply).to.be.a('function');
      });


      it('multiply has documented arity', function() {
        expect(funkier.arityOf(funkier.multiply)).to.equal(2);
      });


      it('multiply is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.multiply)).to.equal(true);
      });
    });


    describe('not', function() {
      it('not exists', function() {
        expect(funkier).to.have.a.property('not');
      });


      it('funkierJS\'s not is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.not).to.equal(module.not);
      });


      it('not is a function', function() {
        expect(funkier.not).to.be.a('function');
      });


      it('not has documented arity', function() {
        expect(funkier.arityOf(funkier.not)).to.equal(1);
      });


      it('not is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.not)).to.equal(true);
      });
    });


    describe('notEqual', function() {
      it('notEqual exists', function() {
        expect(funkier).to.have.a.property('notEqual');
      });


      it('funkierJS\'s notEqual is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.notEqual).to.equal(module.notEqual);
      });


      it('notEqual is a function', function() {
        expect(funkier.notEqual).to.be.a('function');
      });


      it('notEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.notEqual)).to.equal(2);
      });


      it('notEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.notEqual)).to.equal(true);
      });
    });


    describe('notEquals', function() {
      it('notEquals exists', function() {
        expect(funkier).to.have.a.property('notEquals');
      });


      it('notEquals is a synonym for notEqual', function() {
        expect(funkier.notEquals).to.equal(funkier.notEqual);
      });
    });


    describe('notPred', function() {
      it('notPred exists', function() {
        expect(funkier).to.have.a.property('notPred');
      });


      it('funkierJS\'s notPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.notPred).to.equal(module.notPred);
      });


      it('notPred is a function', function() {
        expect(funkier.notPred).to.be.a('function');
      });


      it('notPred has documented arity', function() {
        expect(funkier.arityOf(funkier.notPred)).to.equal(1);
      });


      it('notPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.notPred)).to.equal(true);
      });
    });


    describe('nub', function() {
      it('nub exists', function() {
        expect(funkier).to.have.a.property('nub');
      });


      it('funkierJS\'s nub is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.nub).to.equal(module.nub);
      });


      it('nub is a function', function() {
        expect(funkier.nub).to.be.a('function');
      });


      it('nub has documented arity', function() {
        expect(funkier.arityOf(funkier.nub)).to.equal(1);
      });


      it('nub is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.nub)).to.equal(true);
      });
    });


    describe('nubWith', function() {
      it('nubWith exists', function() {
        expect(funkier).to.have.a.property('nubWith');
      });


      it('funkierJS\'s nubWith is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.nubWith).to.equal(module.nubWith);
      });


      it('nubWith is a function', function() {
        expect(funkier.nubWith).to.be.a('function');
      });


      it('nubWith has documented arity', function() {
        expect(funkier.arityOf(funkier.nubWith)).to.equal(2);
      });


      it('nubWith is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.nubWith)).to.equal(true);
      });
    });


    describe('objectCurry', function() {
      it('objectCurry exists', function() {
        expect(funkier).to.have.a.property('objectCurry');
      });


      it('funkierJS\'s objectCurry is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.objectCurry).to.equal(module.objectCurry);
      });


      it('objectCurry is a function', function() {
        expect(funkier.objectCurry).to.be.a('function');
      });


      it('objectCurry has documented arity', function() {
        expect(funkier.arityOf(funkier.objectCurry)).to.equal(1);
      });


      it('objectCurry is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.objectCurry)).to.equal(true);
      });
    });


    describe('objectCurryWithArity', function() {
      it('objectCurryWithArity exists', function() {
        expect(funkier).to.have.a.property('objectCurryWithArity');
      });


      it('funkierJS\'s objectCurryWithArity is indeed the documented value', function() {
        var module = require('../../lib/components/curry');
        expect(funkier.objectCurryWithArity).to.equal(module.objectCurryWithArity);
      });


      it('objectCurryWithArity is a function', function() {
        expect(funkier.objectCurryWithArity).to.be.a('function');
      });


      it('objectCurryWithArity has documented arity', function() {
        expect(funkier.arityOf(funkier.objectCurryWithArity)).to.equal(2);
      });


      it('objectCurryWithArity is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.objectCurryWithArity)).to.equal(true);
      });
    });


    describe('occurrences', function() {
      it('occurrences exists', function() {
        expect(funkier).to.have.a.property('occurrences');
      });


      it('funkierJS\'s occurrences is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.occurrences).to.equal(module.occurrences);
      });


      it('occurrences is a function', function() {
        expect(funkier.occurrences).to.be.a('function');
      });


      it('occurrences has documented arity', function() {
        expect(funkier.arityOf(funkier.occurrences)).to.equal(2);
      });


      it('occurrences is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.occurrences)).to.equal(true);
      });
    });


    describe('occurrencesWith', function() {
      it('occurrencesWith exists', function() {
        expect(funkier).to.have.a.property('occurrencesWith');
      });


      it('funkierJS\'s occurrencesWith is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.occurrencesWith).to.equal(module.occurrencesWith);
      });


      it('occurrencesWith is a function', function() {
        expect(funkier.occurrencesWith).to.be.a('function');
      });


      it('occurrencesWith has documented arity', function() {
        expect(funkier.arityOf(funkier.occurrencesWith)).to.equal(2);
      });


      it('occurrencesWith is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.occurrencesWith)).to.equal(true);
      });
    });


    describe('odd', function() {
      it('odd exists', function() {
        expect(funkier).to.have.a.property('odd');
      });


      it('funkierJS\'s odd is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.odd).to.equal(module.odd);
      });


      it('odd is a function', function() {
        expect(funkier.odd).to.be.a('function');
      });


      it('odd has documented arity', function() {
        expect(funkier.arityOf(funkier.odd)).to.equal(1);
      });


      it('odd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.odd)).to.equal(true);
      });
    });


    describe('or', function() {
      it('or exists', function() {
        expect(funkier).to.have.a.property('or');
      });


      it('funkierJS\'s or is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.or).to.equal(module.or);
      });


      it('or is a function', function() {
        expect(funkier.or).to.be.a('function');
      });


      it('or has documented arity', function() {
        expect(funkier.arityOf(funkier.or)).to.equal(2);
      });


      it('or is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.or)).to.equal(true);
      });
    });


    describe('orPred', function() {
      it('orPred exists', function() {
        expect(funkier).to.have.a.property('orPred');
      });


      it('funkierJS\'s orPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.orPred).to.equal(module.orPred);
      });


      it('orPred is a function', function() {
        expect(funkier.orPred).to.be.a('function');
      });


      it('orPred has documented arity', function() {
        expect(funkier.arityOf(funkier.orPred)).to.equal(2);
      });


      it('orPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.orPred)).to.equal(true);
      });
    });


    describe('ord', function() {
      it('ord exists', function() {
        expect(funkier).to.have.a.property('ord');
      });


      it('funkierJS\'s ord is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.ord).to.equal(module.ord);
      });


      it('ord is a function', function() {
        expect(funkier.ord).to.be.a('function');
      });


      it('ord has documented arity', function() {
        expect(funkier.arityOf(funkier.ord)).to.equal(1);
      });


      it('ord is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.ord)).to.equal(true);
      });
    });


    describe('parseInt', function() {
      it('parseInt exists', function() {
        expect(funkier).to.have.a.property('parseInt');
      });


      it('funkierJS\'s parseInt is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.parseInt).to.equal(module.parseInt);
      });


      it('parseInt is a function', function() {
        expect(funkier.parseInt).to.be.a('function');
      });


      it('parseInt has documented arity', function() {
        expect(funkier.arityOf(funkier.parseInt)).to.equal(1);
      });


      it('parseInt is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.parseInt)).to.equal(true);
      });
    });


    describe('parseIntInBase', function() {
      it('parseIntInBase exists', function() {
        expect(funkier).to.have.a.property('parseIntInBase');
      });


      it('parseIntInBase is a synonym for stringToInt', function() {
        expect(funkier.parseIntInBase).to.equal(funkier.stringToInt);
      });
    });


    describe('permuteLeft', function() {
      it('permuteLeft exists', function() {
        expect(funkier).to.have.a.property('permuteLeft');
      });


      it('funkierJS\'s permuteLeft is indeed the documented value', function() {
        var module = require('../../lib/components/fn');
        expect(funkier.permuteLeft).to.equal(module.permuteLeft);
      });


      it('permuteLeft is a function', function() {
        expect(funkier.permuteLeft).to.be.a('function');
      });


      it('permuteLeft has documented arity', function() {
        expect(funkier.arityOf(funkier.permuteLeft)).to.equal(1);
      });


      it('permuteLeft is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.permuteLeft)).to.equal(true);
      });
    });


    describe('permuteRight', function() {
      it('permuteRight exists', function() {
        expect(funkier).to.have.a.property('permuteRight');
      });


      it('funkierJS\'s permuteRight is indeed the documented value', function() {
        var module = require('../../lib/components/fn');
        expect(funkier.permuteRight).to.equal(module.permuteRight);
      });


      it('permuteRight is a function', function() {
        expect(funkier.permuteRight).to.be.a('function');
      });


      it('permuteRight has documented arity', function() {
        expect(funkier.arityOf(funkier.permuteRight)).to.equal(1);
      });


      it('permuteRight is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.permuteRight)).to.equal(true);
      });
    });


    describe('plus', function() {
      it('plus exists', function() {
        expect(funkier).to.have.a.property('plus');
      });


      it('plus is a synonym for add', function() {
        expect(funkier.plus).to.equal(funkier.add);
      });
    });


    describe('post', function() {
      it('post exists', function() {
        expect(funkier).to.have.a.property('post');
      });


      it('funkierJS\'s post is indeed the documented value', function() {
        var module = require('../../lib/components/fn');
        expect(funkier.post).to.equal(module.post);
      });


      it('post is a function', function() {
        expect(funkier.post).to.be.a('function');
      });


      it('post has documented arity', function() {
        expect(funkier.arityOf(funkier.post)).to.equal(2);
      });


      it('post is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.post)).to.equal(true);
      });
    });


    describe('pow', function() {
      it('pow exists', function() {
        expect(funkier).to.have.a.property('pow');
      });


      it('pow is a synonym for exp', function() {
        expect(funkier.pow).to.equal(funkier.exp);
      });
    });


    describe('pre', function() {
      it('pre exists', function() {
        expect(funkier).to.have.a.property('pre');
      });


      it('funkierJS\'s pre is indeed the documented value', function() {
        var module = require('../../lib/components/fn');
        expect(funkier.pre).to.equal(module.pre);
      });


      it('pre is a function', function() {
        expect(funkier.pre).to.be.a('function');
      });


      it('pre has documented arity', function() {
        expect(funkier.arityOf(funkier.pre)).to.equal(2);
      });


      it('pre is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.pre)).to.equal(true);
      });
    });


    describe('prefixes', function() {
      it('prefixes exists', function() {
        expect(funkier).to.have.a.property('prefixes');
      });


      it('prefixes is a synonym for inits', function() {
        expect(funkier.prefixes).to.equal(funkier.inits);
      });
    });


    describe('prepend', function() {
      it('prepend exists', function() {
        expect(funkier).to.have.a.property('prepend');
      });


      it('funkierJS\'s prepend is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.prepend).to.equal(module.prepend);
      });


      it('prepend is a function', function() {
        expect(funkier.prepend).to.be.a('function');
      });


      it('prepend has documented arity', function() {
        expect(funkier.arityOf(funkier.prepend)).to.equal(2);
      });


      it('prepend is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.prepend)).to.equal(true);
      });
    });


    describe('product', function() {
      it('product exists', function() {
        expect(funkier).to.have.a.property('product');
      });


      it('funkierJS\'s product is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.product).to.equal(module.product);
      });


      it('product is a function', function() {
        expect(funkier.product).to.be.a('function');
      });


      it('product has documented arity', function() {
        expect(funkier.arityOf(funkier.product)).to.equal(1);
      });


      it('product is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.product)).to.equal(true);
      });
    });


    describe('range', function() {
      it('range exists', function() {
        expect(funkier).to.have.a.property('range');
      });


      it('funkierJS\'s range is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.range).to.equal(module.range);
      });


      it('range is a function', function() {
        expect(funkier.range).to.be.a('function');
      });


      it('range has documented arity', function() {
        expect(funkier.arityOf(funkier.range)).to.equal(2);
      });


      it('range is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.range)).to.equal(true);
      });
    });


    describe('rangeStep', function() {
      it('rangeStep exists', function() {
        expect(funkier).to.have.a.property('rangeStep');
      });


      it('rangeStep is a synonym for rangeStride', function() {
        expect(funkier.rangeStep).to.equal(funkier.rangeStride);
      });
    });


    describe('rangeStride', function() {
      it('rangeStride exists', function() {
        expect(funkier).to.have.a.property('rangeStride');
      });


      it('funkierJS\'s rangeStride is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.rangeStride).to.equal(module.rangeStride);
      });


      it('rangeStride is a function', function() {
        expect(funkier.rangeStride).to.be.a('function');
      });


      it('rangeStride has documented arity', function() {
        expect(funkier.arityOf(funkier.rangeStride)).to.equal(3);
      });


      it('rangeStride is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rangeStride)).to.equal(true);
      });
    });


    describe('reduce', function() {
      it('reduce exists', function() {
        expect(funkier).to.have.a.property('reduce');
      });


      it('reduce is a synonym for foldl', function() {
        expect(funkier.reduce).to.equal(funkier.foldl);
      });
    });


    describe('reduce1', function() {
      it('reduce1 exists', function() {
        expect(funkier).to.have.a.property('reduce1');
      });


      it('reduce1 is a synonym for foldl1', function() {
        expect(funkier.reduce1).to.equal(funkier.foldl1);
      });
    });


    describe('reduceRight', function() {
      it('reduceRight exists', function() {
        expect(funkier).to.have.a.property('reduceRight');
      });


      it('reduceRight is a synonym for foldr', function() {
        expect(funkier.reduceRight).to.equal(funkier.foldr);
      });
    });


    describe('reduceRight1', function() {
      it('reduceRight1 exists', function() {
        expect(funkier).to.have.a.property('reduceRight1');
      });


      it('reduceRight1 is a synonym for foldr1', function() {
        expect(funkier.reduceRight1).to.equal(funkier.foldr1);
      });
    });


    describe('regExpSplit', function() {
      it('regExpSplit exists', function() {
        expect(funkier).to.have.a.property('regExpSplit');
      });


      it('funkierJS\'s regExpSplit is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.regExpSplit).to.equal(module.regExpSplit);
      });


      it('regExpSplit is a function', function() {
        expect(funkier.regExpSplit).to.be.a('function');
      });


      it('regExpSplit has documented arity', function() {
        expect(funkier.arityOf(funkier.regExpSplit)).to.equal(2);
      });


      it('regExpSplit is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.regExpSplit)).to.equal(true);
      });
    });


    describe('regExpSplitCount', function() {
      it('regExpSplitCount exists', function() {
        expect(funkier).to.have.a.property('regExpSplitCount');
      });


      it('regExpSplitCount is a synonym for regExpSplitMax', function() {
        expect(funkier.regExpSplitCount).to.equal(funkier.regExpSplitMax);
      });
    });


    describe('regExpSplitLimit', function() {
      it('regExpSplitLimit exists', function() {
        expect(funkier).to.have.a.property('regExpSplitLimit');
      });


      it('regExpSplitLimit is a synonym for regExpSplitMax', function() {
        expect(funkier.regExpSplitLimit).to.equal(funkier.regExpSplitMax);
      });
    });


    describe('regExpSplitMax', function() {
      it('regExpSplitMax exists', function() {
        expect(funkier).to.have.a.property('regExpSplitMax');
      });


      it('funkierJS\'s regExpSplitMax is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.regExpSplitMax).to.equal(module.regExpSplitMax);
      });


      it('regExpSplitMax is a function', function() {
        expect(funkier.regExpSplitMax).to.be.a('function');
      });


      it('regExpSplitMax has documented arity', function() {
        expect(funkier.arityOf(funkier.regExpSplitMax)).to.equal(3);
      });


      it('regExpSplitMax is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.regExpSplitMax)).to.equal(true);
      });
    });


    describe('rem', function() {
      it('rem exists', function() {
        expect(funkier).to.have.a.property('rem');
      });


      it('funkierJS\'s rem is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rem).to.equal(module.rem);
      });


      it('rem is a function', function() {
        expect(funkier.rem).to.be.a('function');
      });


      it('rem has documented arity', function() {
        expect(funkier.arityOf(funkier.rem)).to.equal(2);
      });


      it('rem is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rem)).to.equal(true);
      });
    });


    describe('replicate', function() {
      it('replicate exists', function() {
        expect(funkier).to.have.a.property('replicate');
      });


      it('funkierJS\'s replicate is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.replicate).to.equal(module.replicate);
      });


      it('replicate is a function', function() {
        expect(funkier.replicate).to.be.a('function');
      });


      it('replicate has documented arity', function() {
        expect(funkier.arityOf(funkier.replicate)).to.equal(2);
      });


      it('replicate is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.replicate)).to.equal(true);
      });
    });


    describe('reverse', function() {
      it('reverse exists', function() {
        expect(funkier).to.have.a.property('reverse');
      });


      it('funkierJS\'s reverse is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.reverse).to.equal(module.reverse);
      });


      it('reverse is a function', function() {
        expect(funkier.reverse).to.be.a('function');
      });


      it('reverse has documented arity', function() {
        expect(funkier.arityOf(funkier.reverse)).to.equal(1);
      });


      it('reverse is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.reverse)).to.equal(true);
      });
    });


    describe('rightShift', function() {
      it('rightShift exists', function() {
        expect(funkier).to.have.a.property('rightShift');
      });


      it('funkierJS\'s rightShift is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rightShift).to.equal(module.rightShift);
      });


      it('rightShift is a function', function() {
        expect(funkier.rightShift).to.be.a('function');
      });


      it('rightShift has documented arity', function() {
        expect(funkier.arityOf(funkier.rightShift)).to.equal(2);
      });


      it('rightShift is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rightShift)).to.equal(true);
      });
    });


    describe('rightShiftZero', function() {
      it('rightShiftZero exists', function() {
        expect(funkier).to.have.a.property('rightShiftZero');
      });


      it('funkierJS\'s rightShiftZero is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.rightShiftZero).to.equal(module.rightShiftZero);
      });


      it('rightShiftZero is a function', function() {
        expect(funkier.rightShiftZero).to.be.a('function');
      });


      it('rightShiftZero has documented arity', function() {
        expect(funkier.arityOf(funkier.rightShiftZero)).to.equal(2);
      });


      it('rightShiftZero is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.rightShiftZero)).to.equal(true);
      });
    });


    describe('rotateLeft', function() {
      it('rotateLeft exists', function() {
        expect(funkier).to.have.a.property('rotateLeft');
      });


      it('rotateLeft is a synonym for permuteLeft', function() {
        expect(funkier.rotateLeft).to.equal(funkier.permuteLeft);
      });
    });


    describe('rotateRight', function() {
      it('rotateRight exists', function() {
        expect(funkier).to.have.a.property('rotateRight');
      });


      it('rotateRight is a synonym for permuteRight', function() {
        expect(funkier.rotateRight).to.equal(funkier.permuteRight);
      });
    });


    describe('safeCreateProp', function() {
      it('safeCreateProp exists', function() {
        expect(funkier).to.have.a.property('safeCreateProp');
      });


      it('funkierJS\'s safeCreateProp is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.safeCreateProp).to.equal(module.safeCreateProp);
      });


      it('safeCreateProp is a function', function() {
        expect(funkier.safeCreateProp).to.be.a('function');
      });


      it('safeCreateProp has documented arity', function() {
        expect(funkier.arityOf(funkier.safeCreateProp)).to.equal(3);
      });


      it('safeCreateProp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.safeCreateProp)).to.equal(true);
      });
    });


    describe('safeDeleteProp', function() {
      it('safeDeleteProp exists', function() {
        expect(funkier).to.have.a.property('safeDeleteProp');
      });


      it('funkierJS\'s safeDeleteProp is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.safeDeleteProp).to.equal(module.safeDeleteProp);
      });


      it('safeDeleteProp is a function', function() {
        expect(funkier.safeDeleteProp).to.be.a('function');
      });


      it('safeDeleteProp has documented arity', function() {
        expect(funkier.arityOf(funkier.safeDeleteProp)).to.equal(2);
      });


      it('safeDeleteProp is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.safeDeleteProp)).to.equal(true);
      });
    });


    describe('safeExtract', function() {
      it('safeExtract exists', function() {
        expect(funkier).to.have.a.property('safeExtract');
      });


      it('safeExtract is a synonym for maybeExtract', function() {
        expect(funkier.safeExtract).to.equal(funkier.maybeExtract);
      });
    });


    describe('safeModify', function() {
      it('safeModify exists', function() {
        expect(funkier).to.have.a.property('safeModify');
      });


      it('funkierJS\'s safeModify is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.safeModify).to.equal(module.safeModify);
      });


      it('safeModify is a function', function() {
        expect(funkier.safeModify).to.be.a('function');
      });


      it('safeModify has documented arity', function() {
        expect(funkier.arityOf(funkier.safeModify)).to.equal(3);
      });


      it('safeModify is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.safeModify)).to.equal(true);
      });
    });


    describe('safeModifyProp', function() {
      it('safeModifyProp exists', function() {
        expect(funkier).to.have.a.property('safeModifyProp');
      });


      it('safeModifyProp is a synonym for safeModify', function() {
        expect(funkier.safeModifyProp).to.equal(funkier.safeModify);
      });
    });


    describe('safeSet', function() {
      it('safeSet exists', function() {
        expect(funkier).to.have.a.property('safeSet');
      });


      it('funkierJS\'s safeSet is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.safeSet).to.equal(module.safeSet);
      });


      it('safeSet is a function', function() {
        expect(funkier.safeSet).to.be.a('function');
      });


      it('safeSet has documented arity', function() {
        expect(funkier.arityOf(funkier.safeSet)).to.equal(3);
      });


      it('safeSet is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.safeSet)).to.equal(true);
      });
    });


    describe('safeSetProp', function() {
      it('safeSetProp exists', function() {
        expect(funkier).to.have.a.property('safeSetProp');
      });


      it('safeSetProp is a synonym for safeSet', function() {
        expect(funkier.safeSetProp).to.equal(funkier.safeSet);
      });
    });


    describe('safeTap', function() {
      it('safeTap exists', function() {
        expect(funkier).to.have.a.property('safeTap');
      });


      it('safeTap is a synonym for maybeExtract', function() {
        expect(funkier.safeTap).to.equal(funkier.maybeExtract);
      });
    });


    describe('second', function() {
      it('second exists', function() {
        expect(funkier).to.have.a.property('second');
      });


      it('second is a synonym for snd', function() {
        expect(funkier.second).to.equal(funkier.snd);
      });
    });


    describe('sectionLeft', function() {
      it('sectionLeft exists', function() {
        expect(funkier).to.have.a.property('sectionLeft');
      });


      it('funkierJS\'s sectionLeft is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.sectionLeft).to.equal(module.sectionLeft);
      });


      it('sectionLeft is a function', function() {
        expect(funkier.sectionLeft).to.be.a('function');
      });


      it('sectionLeft has documented arity', function() {
        expect(funkier.arityOf(funkier.sectionLeft)).to.equal(2);
      });


      it('sectionLeft is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.sectionLeft)).to.equal(true);
      });
    });


    describe('sectionRight', function() {
      it('sectionRight exists', function() {
        expect(funkier).to.have.a.property('sectionRight');
      });


      it('funkierJS\'s sectionRight is indeed the documented value', function() {
        var module = require('../../lib/components/base');
        expect(funkier.sectionRight).to.equal(module.sectionRight);
      });


      it('sectionRight is a function', function() {
        expect(funkier.sectionRight).to.be.a('function');
      });


      it('sectionRight has documented arity', function() {
        expect(funkier.arityOf(funkier.sectionRight)).to.equal(2);
      });


      it('sectionRight is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.sectionRight)).to.equal(true);
      });
    });


    describe('set', function() {
      it('set exists', function() {
        expect(funkier).to.have.a.property('set');
      });


      it('funkierJS\'s set is indeed the documented value', function() {
        var module = require('../../lib/components/object');
        expect(funkier.set).to.equal(module.set);
      });


      it('set is a function', function() {
        expect(funkier.set).to.be.a('function');
      });


      it('set has documented arity', function() {
        expect(funkier.arityOf(funkier.set)).to.equal(3);
      });


      it('set is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.set)).to.equal(true);
      });
    });


    describe('setDayOfMonth', function() {
      it('setDayOfMonth exists', function() {
        expect(funkier).to.have.a.property('setDayOfMonth');
      });


      it('funkierJS\'s setDayOfMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setDayOfMonth).to.equal(module.setDayOfMonth);
      });


      it('setDayOfMonth is a function', function() {
        expect(funkier.setDayOfMonth).to.be.a('function');
      });


      it('setDayOfMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.setDayOfMonth)).to.equal(2);
      });


      it('setDayOfMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setDayOfMonth)).to.equal(true);
      });
    });


    describe('setFullYear', function() {
      it('setFullYear exists', function() {
        expect(funkier).to.have.a.property('setFullYear');
      });


      it('funkierJS\'s setFullYear is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setFullYear).to.equal(module.setFullYear);
      });


      it('setFullYear is a function', function() {
        expect(funkier.setFullYear).to.be.a('function');
      });


      it('setFullYear has documented arity', function() {
        expect(funkier.arityOf(funkier.setFullYear)).to.equal(2);
      });


      it('setFullYear is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setFullYear)).to.equal(true);
      });
    });


    describe('setHours', function() {
      it('setHours exists', function() {
        expect(funkier).to.have.a.property('setHours');
      });


      it('funkierJS\'s setHours is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setHours).to.equal(module.setHours);
      });


      it('setHours is a function', function() {
        expect(funkier.setHours).to.be.a('function');
      });


      it('setHours has documented arity', function() {
        expect(funkier.arityOf(funkier.setHours)).to.equal(2);
      });


      it('setHours is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setHours)).to.equal(true);
      });
    });


    describe('setMilliseconds', function() {
      it('setMilliseconds exists', function() {
        expect(funkier).to.have.a.property('setMilliseconds');
      });


      it('funkierJS\'s setMilliseconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setMilliseconds).to.equal(module.setMilliseconds);
      });


      it('setMilliseconds is a function', function() {
        expect(funkier.setMilliseconds).to.be.a('function');
      });


      it('setMilliseconds has documented arity', function() {
        expect(funkier.arityOf(funkier.setMilliseconds)).to.equal(2);
      });


      it('setMilliseconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setMilliseconds)).to.equal(true);
      });
    });


    describe('setMinutes', function() {
      it('setMinutes exists', function() {
        expect(funkier).to.have.a.property('setMinutes');
      });


      it('funkierJS\'s setMinutes is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setMinutes).to.equal(module.setMinutes);
      });


      it('setMinutes is a function', function() {
        expect(funkier.setMinutes).to.be.a('function');
      });


      it('setMinutes has documented arity', function() {
        expect(funkier.arityOf(funkier.setMinutes)).to.equal(2);
      });


      it('setMinutes is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setMinutes)).to.equal(true);
      });
    });


    describe('setMonth', function() {
      it('setMonth exists', function() {
        expect(funkier).to.have.a.property('setMonth');
      });


      it('funkierJS\'s setMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setMonth).to.equal(module.setMonth);
      });


      it('setMonth is a function', function() {
        expect(funkier.setMonth).to.be.a('function');
      });


      it('setMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.setMonth)).to.equal(2);
      });


      it('setMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setMonth)).to.equal(true);
      });
    });


    describe('setProp', function() {
      it('setProp exists', function() {
        expect(funkier).to.have.a.property('setProp');
      });


      it('setProp is a synonym for set', function() {
        expect(funkier.setProp).to.equal(funkier.set);
      });
    });


    describe('setSeconds', function() {
      it('setSeconds exists', function() {
        expect(funkier).to.have.a.property('setSeconds');
      });


      it('funkierJS\'s setSeconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setSeconds).to.equal(module.setSeconds);
      });


      it('setSeconds is a function', function() {
        expect(funkier.setSeconds).to.be.a('function');
      });


      it('setSeconds has documented arity', function() {
        expect(funkier.arityOf(funkier.setSeconds)).to.equal(2);
      });


      it('setSeconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setSeconds)).to.equal(true);
      });
    });


    describe('setTimeSinceEpoch', function() {
      it('setTimeSinceEpoch exists', function() {
        expect(funkier).to.have.a.property('setTimeSinceEpoch');
      });


      it('funkierJS\'s setTimeSinceEpoch is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setTimeSinceEpoch).to.equal(module.setTimeSinceEpoch);
      });


      it('setTimeSinceEpoch is a function', function() {
        expect(funkier.setTimeSinceEpoch).to.be.a('function');
      });


      it('setTimeSinceEpoch has documented arity', function() {
        expect(funkier.arityOf(funkier.setTimeSinceEpoch)).to.equal(2);
      });


      it('setTimeSinceEpoch is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setTimeSinceEpoch)).to.equal(true);
      });
    });


    describe('setUTCDayOfMonth', function() {
      it('setUTCDayOfMonth exists', function() {
        expect(funkier).to.have.a.property('setUTCDayOfMonth');
      });


      it('funkierJS\'s setUTCDayOfMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setUTCDayOfMonth).to.equal(module.setUTCDayOfMonth);
      });


      it('setUTCDayOfMonth is a function', function() {
        expect(funkier.setUTCDayOfMonth).to.be.a('function');
      });


      it('setUTCDayOfMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.setUTCDayOfMonth)).to.equal(2);
      });


      it('setUTCDayOfMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setUTCDayOfMonth)).to.equal(true);
      });
    });


    describe('setUTCFullYear', function() {
      it('setUTCFullYear exists', function() {
        expect(funkier).to.have.a.property('setUTCFullYear');
      });


      it('funkierJS\'s setUTCFullYear is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setUTCFullYear).to.equal(module.setUTCFullYear);
      });


      it('setUTCFullYear is a function', function() {
        expect(funkier.setUTCFullYear).to.be.a('function');
      });


      it('setUTCFullYear has documented arity', function() {
        expect(funkier.arityOf(funkier.setUTCFullYear)).to.equal(2);
      });


      it('setUTCFullYear is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setUTCFullYear)).to.equal(true);
      });
    });


    describe('setUTCHours', function() {
      it('setUTCHours exists', function() {
        expect(funkier).to.have.a.property('setUTCHours');
      });


      it('funkierJS\'s setUTCHours is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setUTCHours).to.equal(module.setUTCHours);
      });


      it('setUTCHours is a function', function() {
        expect(funkier.setUTCHours).to.be.a('function');
      });


      it('setUTCHours has documented arity', function() {
        expect(funkier.arityOf(funkier.setUTCHours)).to.equal(2);
      });


      it('setUTCHours is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setUTCHours)).to.equal(true);
      });
    });


    describe('setUTCMilliseconds', function() {
      it('setUTCMilliseconds exists', function() {
        expect(funkier).to.have.a.property('setUTCMilliseconds');
      });


      it('funkierJS\'s setUTCMilliseconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setUTCMilliseconds).to.equal(module.setUTCMilliseconds);
      });


      it('setUTCMilliseconds is a function', function() {
        expect(funkier.setUTCMilliseconds).to.be.a('function');
      });


      it('setUTCMilliseconds has documented arity', function() {
        expect(funkier.arityOf(funkier.setUTCMilliseconds)).to.equal(2);
      });


      it('setUTCMilliseconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setUTCMilliseconds)).to.equal(true);
      });
    });


    describe('setUTCMinutes', function() {
      it('setUTCMinutes exists', function() {
        expect(funkier).to.have.a.property('setUTCMinutes');
      });


      it('funkierJS\'s setUTCMinutes is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setUTCMinutes).to.equal(module.setUTCMinutes);
      });


      it('setUTCMinutes is a function', function() {
        expect(funkier.setUTCMinutes).to.be.a('function');
      });


      it('setUTCMinutes has documented arity', function() {
        expect(funkier.arityOf(funkier.setUTCMinutes)).to.equal(2);
      });


      it('setUTCMinutes is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setUTCMinutes)).to.equal(true);
      });
    });


    describe('setUTCMonth', function() {
      it('setUTCMonth exists', function() {
        expect(funkier).to.have.a.property('setUTCMonth');
      });


      it('funkierJS\'s setUTCMonth is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setUTCMonth).to.equal(module.setUTCMonth);
      });


      it('setUTCMonth is a function', function() {
        expect(funkier.setUTCMonth).to.be.a('function');
      });


      it('setUTCMonth has documented arity', function() {
        expect(funkier.arityOf(funkier.setUTCMonth)).to.equal(2);
      });


      it('setUTCMonth is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setUTCMonth)).to.equal(true);
      });
    });


    describe('setUTCSeconds', function() {
      it('setUTCSeconds exists', function() {
        expect(funkier).to.have.a.property('setUTCSeconds');
      });


      it('funkierJS\'s setUTCSeconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.setUTCSeconds).to.equal(module.setUTCSeconds);
      });


      it('setUTCSeconds is a function', function() {
        expect(funkier.setUTCSeconds).to.be.a('function');
      });


      it('setUTCSeconds has documented arity', function() {
        expect(funkier.arityOf(funkier.setUTCSeconds)).to.equal(2);
      });


      it('setUTCSeconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.setUTCSeconds)).to.equal(true);
      });
    });


    describe('shallowClone', function() {
      it('shallowClone exists', function() {
        expect(funkier).to.have.a.property('shallowClone');
      });


      it('shallowClone is a synonym for clone', function() {
        expect(funkier.shallowClone).to.equal(funkier.clone);
      });
    });


    describe('slice', function() {
      it('slice exists', function() {
        expect(funkier).to.have.a.property('slice');
      });


      it('funkierJS\'s slice is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.slice).to.equal(module.slice);
      });


      it('slice is a function', function() {
        expect(funkier.slice).to.be.a('function');
      });


      it('slice has documented arity', function() {
        expect(funkier.arityOf(funkier.slice)).to.equal(3);
      });


      it('slice is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.slice)).to.equal(true);
      });
    });


    describe('snd', function() {
      it('snd exists', function() {
        expect(funkier).to.have.a.property('snd');
      });


      it('funkierJS\'s snd is indeed the documented value', function() {
        var module = require('../../lib/components/pair');
        expect(funkier.snd).to.equal(module.snd);
      });


      it('snd is a function', function() {
        expect(funkier.snd).to.be.a('function');
      });


      it('snd has documented arity', function() {
        expect(funkier.arityOf(funkier.snd)).to.equal(1);
      });


      it('snd is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.snd)).to.equal(true);
      });
    });


    describe('some', function() {
      it('some exists', function() {
        expect(funkier).to.have.a.property('some');
      });


      it('funkierJS\'s some is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.some).to.equal(module.some);
      });


      it('some is a function', function() {
        expect(funkier.some).to.be.a('function');
      });


      it('some has documented arity', function() {
        expect(funkier.arityOf(funkier.some)).to.equal(2);
      });


      it('some is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.some)).to.equal(true);
      });
    });


    describe('sort', function() {
      it('sort exists', function() {
        expect(funkier).to.have.a.property('sort');
      });


      it('funkierJS\'s sort is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.sort).to.equal(module.sort);
      });


      it('sort is a function', function() {
        expect(funkier.sort).to.be.a('function');
      });


      it('sort has documented arity', function() {
        expect(funkier.arityOf(funkier.sort)).to.equal(1);
      });


      it('sort is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.sort)).to.equal(true);
      });
    });


    describe('sortWith', function() {
      it('sortWith exists', function() {
        expect(funkier).to.have.a.property('sortWith');
      });


      it('funkierJS\'s sortWith is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.sortWith).to.equal(module.sortWith);
      });


      it('sortWith is a function', function() {
        expect(funkier.sortWith).to.be.a('function');
      });


      it('sortWith has documented arity', function() {
        expect(funkier.arityOf(funkier.sortWith)).to.equal(2);
      });


      it('sortWith is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.sortWith)).to.equal(true);
      });
    });


    describe('split', function() {
      it('split exists', function() {
        expect(funkier).to.have.a.property('split');
      });


      it('funkierJS\'s split is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.split).to.equal(module.split);
      });


      it('split is a function', function() {
        expect(funkier.split).to.be.a('function');
      });


      it('split has documented arity', function() {
        expect(funkier.arityOf(funkier.split)).to.equal(2);
      });


      it('split is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.split)).to.equal(true);
      });
    });


    describe('splitCount', function() {
      it('splitCount exists', function() {
        expect(funkier).to.have.a.property('splitCount');
      });


      it('splitCount is a synonym for splitMax', function() {
        expect(funkier.splitCount).to.equal(funkier.splitMax);
      });
    });


    describe('splitLimit', function() {
      it('splitLimit exists', function() {
        expect(funkier).to.have.a.property('splitLimit');
      });


      it('splitLimit is a synonym for splitMax', function() {
        expect(funkier.splitLimit).to.equal(funkier.splitMax);
      });
    });


    describe('splitMax', function() {
      it('splitMax exists', function() {
        expect(funkier).to.have.a.property('splitMax');
      });


      it('funkierJS\'s splitMax is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.splitMax).to.equal(module.splitMax);
      });


      it('splitMax is a function', function() {
        expect(funkier.splitMax).to.be.a('function');
      });


      it('splitMax has documented arity', function() {
        expect(funkier.arityOf(funkier.splitMax)).to.equal(3);
      });


      it('splitMax is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.splitMax)).to.equal(true);
      });
    });


    describe('splitRegExp', function() {
      it('splitRegExp exists', function() {
        expect(funkier).to.have.a.property('splitRegExp');
      });


      it('splitRegExp is a synonym for regExpSplit', function() {
        expect(funkier.splitRegExp).to.equal(funkier.regExpSplit);
      });
    });


    describe('strictEquals', function() {
      it('strictEquals exists', function() {
        expect(funkier).to.have.a.property('strictEquals');
      });


      it('funkierJS\'s strictEquals is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.strictEquals).to.equal(module.strictEquals);
      });


      it('strictEquals is a function', function() {
        expect(funkier.strictEquals).to.be.a('function');
      });


      it('strictEquals has documented arity', function() {
        expect(funkier.arityOf(funkier.strictEquals)).to.equal(2);
      });


      it('strictEquals is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.strictEquals)).to.equal(true);
      });
    });


    describe('strictInequality', function() {
      it('strictInequality exists', function() {
        expect(funkier).to.have.a.property('strictInequality');
      });


      it('strictInequality is a synonym for strictNotEqual', function() {
        expect(funkier.strictInequality).to.equal(funkier.strictNotEqual);
      });
    });


    describe('strictNotEqual', function() {
      it('strictNotEqual exists', function() {
        expect(funkier).to.have.a.property('strictNotEqual');
      });


      it('funkierJS\'s strictNotEqual is indeed the documented value', function() {
        var module = require('../../lib/components/types');
        expect(funkier.strictNotEqual).to.equal(module.strictNotEqual);
      });


      it('strictNotEqual is a function', function() {
        expect(funkier.strictNotEqual).to.be.a('function');
      });


      it('strictNotEqual has documented arity', function() {
        expect(funkier.arityOf(funkier.strictNotEqual)).to.equal(2);
      });


      it('strictNotEqual is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.strictNotEqual)).to.equal(true);
      });
    });


    describe('strictNotEquals', function() {
      it('strictNotEquals exists', function() {
        expect(funkier).to.have.a.property('strictNotEquals');
      });


      it('strictNotEquals is a synonym for strictNotEqual', function() {
        expect(funkier.strictNotEquals).to.equal(funkier.strictNotEqual);
      });
    });


    describe('stringToInt', function() {
      it('stringToInt exists', function() {
        expect(funkier).to.have.a.property('stringToInt');
      });


      it('funkierJS\'s stringToInt is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.stringToInt).to.equal(module.stringToInt);
      });


      it('stringToInt is a function', function() {
        expect(funkier.stringToInt).to.be.a('function');
      });


      it('stringToInt has documented arity', function() {
        expect(funkier.arityOf(funkier.stringToInt)).to.equal(2);
      });


      it('stringToInt is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.stringToInt)).to.equal(true);
      });
    });


    describe('subtract', function() {
      it('subtract exists', function() {
        expect(funkier).to.have.a.property('subtract');
      });


      it('funkierJS\'s subtract is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.subtract).to.equal(module.subtract);
      });


      it('subtract is a function', function() {
        expect(funkier.subtract).to.be.a('function');
      });


      it('subtract has documented arity', function() {
        expect(funkier.arityOf(funkier.subtract)).to.equal(2);
      });


      it('subtract is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.subtract)).to.equal(true);
      });
    });


    describe('suffixes', function() {
      it('suffixes exists', function() {
        expect(funkier).to.have.a.property('suffixes');
      });


      it('suffixes is a synonym for tails', function() {
        expect(funkier.suffixes).to.equal(funkier.tails);
      });
    });


    describe('sum', function() {
      it('sum exists', function() {
        expect(funkier).to.have.a.property('sum');
      });


      it('funkierJS\'s sum is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.sum).to.equal(module.sum);
      });


      it('sum is a function', function() {
        expect(funkier.sum).to.be.a('function');
      });


      it('sum has documented arity', function() {
        expect(funkier.arityOf(funkier.sum)).to.equal(1);
      });


      it('sum is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.sum)).to.equal(true);
      });
    });


    describe('tail', function() {
      it('tail exists', function() {
        expect(funkier).to.have.a.property('tail');
      });


      it('funkierJS\'s tail is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.tail).to.equal(module.tail);
      });


      it('tail is a function', function() {
        expect(funkier.tail).to.be.a('function');
      });


      it('tail has documented arity', function() {
        expect(funkier.arityOf(funkier.tail)).to.equal(1);
      });


      it('tail is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.tail)).to.equal(true);
      });
    });


    describe('tails', function() {
      it('tails exists', function() {
        expect(funkier).to.have.a.property('tails');
      });


      it('funkierJS\'s tails is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.tails).to.equal(module.tails);
      });


      it('tails is a function', function() {
        expect(funkier.tails).to.be.a('function');
      });


      it('tails has documented arity', function() {
        expect(funkier.arityOf(funkier.tails)).to.equal(1);
      });


      it('tails is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.tails)).to.equal(true);
      });
    });


    describe('take', function() {
      it('take exists', function() {
        expect(funkier).to.have.a.property('take');
      });


      it('funkierJS\'s take is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.take).to.equal(module.take);
      });


      it('take is a function', function() {
        expect(funkier.take).to.be.a('function');
      });


      it('take has documented arity', function() {
        expect(funkier.arityOf(funkier.take)).to.equal(2);
      });


      it('take is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.take)).to.equal(true);
      });
    });


    describe('takeWhile', function() {
      it('takeWhile exists', function() {
        expect(funkier).to.have.a.property('takeWhile');
      });


      it('funkierJS\'s takeWhile is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.takeWhile).to.equal(module.takeWhile);
      });


      it('takeWhile is a function', function() {
        expect(funkier.takeWhile).to.be.a('function');
      });


      it('takeWhile has documented arity', function() {
        expect(funkier.arityOf(funkier.takeWhile)).to.equal(2);
      });


      it('takeWhile is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.takeWhile)).to.equal(true);
      });
    });


    describe('tap', function() {
      it('tap exists', function() {
        expect(funkier).to.have.a.property('tap');
      });


      it('tap is a synonym for extract', function() {
        expect(funkier.tap).to.equal(funkier.extract);
      });
    });


    describe('test', function() {
      it('test exists', function() {
        expect(funkier).to.have.a.property('test');
      });


      it('funkierJS\'s test is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.test).to.equal(module.test);
      });


      it('test is a function', function() {
        expect(funkier.test).to.be.a('function');
      });


      it('test has documented arity', function() {
        expect(funkier.arityOf(funkier.test)).to.equal(2);
      });


      it('test is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.test)).to.equal(true);
      });
    });


    describe('toBaseAndRadix', function() {
      it('toBaseAndRadix exists', function() {
        expect(funkier).to.have.a.property('toBaseAndRadix');
      });


      it('toBaseAndRadix is a synonym for toBaseAndString', function() {
        expect(funkier.toBaseAndRadix).to.equal(funkier.toBaseAndString);
      });
    });


    describe('toBaseAndString', function() {
      it('toBaseAndString exists', function() {
        expect(funkier).to.have.a.property('toBaseAndString');
      });


      it('funkierJS\'s toBaseAndString is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.toBaseAndString).to.equal(module.toBaseAndString);
      });


      it('toBaseAndString is a function', function() {
        expect(funkier.toBaseAndString).to.be.a('function');
      });


      it('toBaseAndString has documented arity', function() {
        expect(funkier.arityOf(funkier.toBaseAndString)).to.equal(2);
      });


      it('toBaseAndString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toBaseAndString)).to.equal(true);
      });
    });


    describe('toCharCode', function() {
      it('toCharCode exists', function() {
        expect(funkier).to.have.a.property('toCharCode');
      });


      it('funkierJS\'s toCharCode is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.toCharCode).to.equal(module.toCharCode);
      });


      it('toCharCode is a function', function() {
        expect(funkier.toCharCode).to.be.a('function');
      });


      it('toCharCode has documented arity', function() {
        expect(funkier.arityOf(funkier.toCharCode)).to.equal(2);
      });


      it('toCharCode is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toCharCode)).to.equal(true);
      });
    });


    describe('toDateString', function() {
      it('toDateString exists', function() {
        expect(funkier).to.have.a.property('toDateString');
      });


      it('funkierJS\'s toDateString is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.toDateString).to.equal(module.toDateString);
      });


      it('toDateString is a function', function() {
        expect(funkier.toDateString).to.be.a('function');
      });


      it('toDateString has documented arity', function() {
        expect(funkier.arityOf(funkier.toDateString)).to.equal(1);
      });


      it('toDateString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toDateString)).to.equal(true);
      });
    });


    describe('toEpochMilliseconds', function() {
      it('toEpochMilliseconds exists', function() {
        expect(funkier).to.have.a.property('toEpochMilliseconds');
      });


      it('funkierJS\'s toEpochMilliseconds is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.toEpochMilliseconds).to.equal(module.toEpochMilliseconds);
      });


      it('toEpochMilliseconds is a function', function() {
        expect(funkier.toEpochMilliseconds).to.be.a('function');
      });


      it('toEpochMilliseconds has documented arity', function() {
        expect(funkier.arityOf(funkier.toEpochMilliseconds)).to.equal(1);
      });


      it('toEpochMilliseconds is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toEpochMilliseconds)).to.equal(true);
      });
    });


    describe('toExponential', function() {
      it('toExponential exists', function() {
        expect(funkier).to.have.a.property('toExponential');
      });


      it('funkierJS\'s toExponential is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.toExponential).to.equal(module.toExponential);
      });


      it('toExponential is a function', function() {
        expect(funkier.toExponential).to.be.a('function');
      });


      it('toExponential has documented arity', function() {
        expect(funkier.arityOf(funkier.toExponential)).to.equal(2);
      });


      it('toExponential is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toExponential)).to.equal(true);
      });
    });


    describe('toFixed', function() {
      it('toFixed exists', function() {
        expect(funkier).to.have.a.property('toFixed');
      });


      it('funkierJS\'s toFixed is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.toFixed).to.equal(module.toFixed);
      });


      it('toFixed is a function', function() {
        expect(funkier.toFixed).to.be.a('function');
      });


      it('toFixed has documented arity', function() {
        expect(funkier.arityOf(funkier.toFixed)).to.equal(2);
      });


      it('toFixed is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toFixed)).to.equal(true);
      });
    });


    describe('toISOString', function() {
      it('toISOString exists', function() {
        expect(funkier).to.have.a.property('toISOString');
      });


      it('funkierJS\'s toISOString is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.toISOString).to.equal(module.toISOString);
      });


      it('toISOString is a function', function() {
        expect(funkier.toISOString).to.be.a('function');
      });


      it('toISOString has documented arity', function() {
        expect(funkier.arityOf(funkier.toISOString)).to.equal(1);
      });


      it('toISOString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toISOString)).to.equal(true);
      });
    });


    describe('toLocaleDateString', function() {
      it('toLocaleDateString exists', function() {
        expect(funkier).to.have.a.property('toLocaleDateString');
      });


      it('funkierJS\'s toLocaleDateString is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.toLocaleDateString).to.equal(module.toLocaleDateString);
      });


      it('toLocaleDateString is a function', function() {
        expect(funkier.toLocaleDateString).to.be.a('function');
      });


      it('toLocaleDateString has documented arity', function() {
        expect(funkier.arityOf(funkier.toLocaleDateString)).to.equal(1);
      });


      it('toLocaleDateString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toLocaleDateString)).to.equal(true);
      });
    });


    describe('toLocaleLowerCase', function() {
      it('toLocaleLowerCase exists', function() {
        expect(funkier).to.have.a.property('toLocaleLowerCase');
      });


      it('funkierJS\'s toLocaleLowerCase is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.toLocaleLowerCase).to.equal(module.toLocaleLowerCase);
      });


      it('toLocaleLowerCase is a function', function() {
        expect(funkier.toLocaleLowerCase).to.be.a('function');
      });


      it('toLocaleLowerCase has documented arity', function() {
        expect(funkier.arityOf(funkier.toLocaleLowerCase)).to.equal(1);
      });


      it('toLocaleLowerCase is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toLocaleLowerCase)).to.equal(true);
      });
    });


    describe('toLocaleString', function() {
      it('toLocaleString exists', function() {
        expect(funkier).to.have.a.property('toLocaleString');
      });


      it('funkierJS\'s toLocaleString is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.toLocaleString).to.equal(module.toLocaleString);
      });


      it('toLocaleString is a function', function() {
        expect(funkier.toLocaleString).to.be.a('function');
      });


      it('toLocaleString has documented arity', function() {
        expect(funkier.arityOf(funkier.toLocaleString)).to.equal(1);
      });


      it('toLocaleString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toLocaleString)).to.equal(true);
      });
    });


    describe('toLocaleUpperCase', function() {
      it('toLocaleUpperCase exists', function() {
        expect(funkier).to.have.a.property('toLocaleUpperCase');
      });


      it('funkierJS\'s toLocaleUpperCase is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.toLocaleUpperCase).to.equal(module.toLocaleUpperCase);
      });


      it('toLocaleUpperCase is a function', function() {
        expect(funkier.toLocaleUpperCase).to.be.a('function');
      });


      it('toLocaleUpperCase has documented arity', function() {
        expect(funkier.arityOf(funkier.toLocaleUpperCase)).to.equal(1);
      });


      it('toLocaleUpperCase is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toLocaleUpperCase)).to.equal(true);
      });
    });


    describe('toLowerCase', function() {
      it('toLowerCase exists', function() {
        expect(funkier).to.have.a.property('toLowerCase');
      });


      it('funkierJS\'s toLowerCase is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.toLowerCase).to.equal(module.toLowerCase);
      });


      it('toLowerCase is a function', function() {
        expect(funkier.toLowerCase).to.be.a('function');
      });


      it('toLowerCase has documented arity', function() {
        expect(funkier.arityOf(funkier.toLowerCase)).to.equal(1);
      });


      it('toLowerCase is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toLowerCase)).to.equal(true);
      });
    });


    describe('toPrecision', function() {
      it('toPrecision exists', function() {
        expect(funkier).to.have.a.property('toPrecision');
      });


      it('funkierJS\'s toPrecision is indeed the documented value', function() {
        var module = require('../../lib/components/maths');
        expect(funkier.toPrecision).to.equal(module.toPrecision);
      });


      it('toPrecision is a function', function() {
        expect(funkier.toPrecision).to.be.a('function');
      });


      it('toPrecision has documented arity', function() {
        expect(funkier.arityOf(funkier.toPrecision)).to.equal(2);
      });


      it('toPrecision is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toPrecision)).to.equal(true);
      });
    });


    describe('toString', function() {
      it('toString exists', function() {
        expect(funkier).to.have.a.property('toString');
      });


      it('funkierJS\'s toString is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.toString).to.equal(module.toString);
      });


      it('toString is a function', function() {
        expect(funkier.toString).to.be.a('function');
      });


      it('toString has documented arity', function() {
        expect(funkier.arityOf(funkier.toString)).to.equal(1);
      });


      it('toString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toString)).to.equal(true);
      });
    });


    describe('toTimeString', function() {
      it('toTimeString exists', function() {
        expect(funkier).to.have.a.property('toTimeString');
      });


      it('funkierJS\'s toTimeString is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.toTimeString).to.equal(module.toTimeString);
      });


      it('toTimeString is a function', function() {
        expect(funkier.toTimeString).to.be.a('function');
      });


      it('toTimeString has documented arity', function() {
        expect(funkier.arityOf(funkier.toTimeString)).to.equal(1);
      });


      it('toTimeString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toTimeString)).to.equal(true);
      });
    });


    describe('toUTCString', function() {
      it('toUTCString exists', function() {
        expect(funkier).to.have.a.property('toUTCString');
      });


      it('funkierJS\'s toUTCString is indeed the documented value', function() {
        var module = require('../../lib/components/date');
        expect(funkier.toUTCString).to.equal(module.toUTCString);
      });


      it('toUTCString is a function', function() {
        expect(funkier.toUTCString).to.be.a('function');
      });


      it('toUTCString has documented arity', function() {
        expect(funkier.arityOf(funkier.toUTCString)).to.equal(1);
      });


      it('toUTCString is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toUTCString)).to.equal(true);
      });
    });


    describe('toUpperCase', function() {
      it('toUpperCase exists', function() {
        expect(funkier).to.have.a.property('toUpperCase');
      });


      it('funkierJS\'s toUpperCase is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.toUpperCase).to.equal(module.toUpperCase);
      });


      it('toUpperCase is a function', function() {
        expect(funkier.toUpperCase).to.be.a('function');
      });


      it('toUpperCase has documented arity', function() {
        expect(funkier.arityOf(funkier.toUpperCase)).to.equal(1);
      });


      it('toUpperCase is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.toUpperCase)).to.equal(true);
      });
    });


    describe('trim', function() {
      it('trim exists', function() {
        expect(funkier).to.have.a.property('trim');
      });


      it('funkierJS\'s trim is indeed the documented value', function() {
        var module = require('../../lib/components/string');
        expect(funkier.trim).to.equal(module.trim);
      });


      it('trim is a function', function() {
        expect(funkier.trim).to.be.a('function');
      });


      it('trim has documented arity', function() {
        expect(funkier.arityOf(funkier.trim)).to.equal(1);
      });


      it('trim is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.trim)).to.equal(true);
      });
    });


    describe('uniq', function() {
      it('uniq exists', function() {
        expect(funkier).to.have.a.property('uniq');
      });


      it('uniq is a synonym for nub', function() {
        expect(funkier.uniq).to.equal(funkier.nub);
      });
    });


    describe('uniqWith', function() {
      it('uniqWith exists', function() {
        expect(funkier).to.have.a.property('uniqWith');
      });


      it('uniqWith is a synonym for nubWith', function() {
        expect(funkier.uniqWith).to.equal(funkier.nubWith);
      });
    });


    describe('unzip', function() {
      it('unzip exists', function() {
        expect(funkier).to.have.a.property('unzip');
      });


      it('funkierJS\'s unzip is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.unzip).to.equal(module.unzip);
      });


      it('unzip is a function', function() {
        expect(funkier.unzip).to.be.a('function');
      });


      it('unzip has documented arity', function() {
        expect(funkier.arityOf(funkier.unzip)).to.equal(1);
      });


      it('unzip is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.unzip)).to.equal(true);
      });
    });


    describe('wrap', function() {
      it('wrap exists', function() {
        expect(funkier).to.have.a.property('wrap');
      });


      it('funkierJS\'s wrap is indeed the documented value', function() {
        var module = require('../../lib/components/fn');
        expect(funkier.wrap).to.equal(module.wrap);
      });


      it('wrap is a function', function() {
        expect(funkier.wrap).to.be.a('function');
      });


      it('wrap has documented arity', function() {
        expect(funkier.arityOf(funkier.wrap)).to.equal(3);
      });


      it('wrap is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.wrap)).to.equal(true);
      });
    });


    describe('xor', function() {
      it('xor exists', function() {
        expect(funkier).to.have.a.property('xor');
      });


      it('funkierJS\'s xor is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.xor).to.equal(module.xor);
      });


      it('xor is a function', function() {
        expect(funkier.xor).to.be.a('function');
      });


      it('xor has documented arity', function() {
        expect(funkier.arityOf(funkier.xor)).to.equal(2);
      });


      it('xor is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.xor)).to.equal(true);
      });
    });


    describe('xorPred', function() {
      it('xorPred exists', function() {
        expect(funkier).to.have.a.property('xorPred');
      });


      it('funkierJS\'s xorPred is indeed the documented value', function() {
        var module = require('../../lib/components/logical');
        expect(funkier.xorPred).to.equal(module.xorPred);
      });


      it('xorPred is a function', function() {
        expect(funkier.xorPred).to.be.a('function');
      });


      it('xorPred has documented arity', function() {
        expect(funkier.arityOf(funkier.xorPred)).to.equal(2);
      });


      it('xorPred is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.xorPred)).to.equal(true);
      });
    });


    describe('zip', function() {
      it('zip exists', function() {
        expect(funkier).to.have.a.property('zip');
      });


      it('funkierJS\'s zip is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.zip).to.equal(module.zip);
      });


      it('zip is a function', function() {
        expect(funkier.zip).to.be.a('function');
      });


      it('zip has documented arity', function() {
        expect(funkier.arityOf(funkier.zip)).to.equal(2);
      });


      it('zip is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.zip)).to.equal(true);
      });
    });


    describe('zipWith', function() {
      it('zipWith exists', function() {
        expect(funkier).to.have.a.property('zipWith');
      });


      it('funkierJS\'s zipWith is indeed the documented value', function() {
        var module = require('../../lib/components/array');
        expect(funkier.zipWith).to.equal(module.zipWith);
      });


      it('zipWith is a function', function() {
        expect(funkier.zipWith).to.be.a('function');
      });


      it('zipWith has documented arity', function() {
        expect(funkier.arityOf(funkier.zipWith)).to.equal(3);
      });


      it('zipWith is curried', function() {
        expect(funkier.arityOf._isCurried(funkier.zipWith)).to.equal(true);
      });
    });
  });


  describe('Exported values', function() {
    var documentedNames;


    beforeEach(function() {
      documentedNames = ['help', 'Err', 'Just', 'Maybe', 'Nothing', 'Ok', 'Pair', 'Result', 'add', 'all', 'and',
         'andPred', 'any', 'append', 'apply', 'arity', 'arityOf', 'asArray', 'bind', 'bindWithContext',
         'bindWithContextAndArity', 'bitwiseAnd', 'bitwiseNot', 'bitwiseOr', 'bitwiseXor', 'callProp',
         'callPropWithArity', 'chr', 'clone', 'compose', 'composeMany', 'composeOn', 'concat', 'constant', 'constant0',
         'copy', 'createObject', 'createObjectWithProps', 'createProp', 'curry', 'curryOwn', 'curryWithArity',
         'deepEqual', 'deepEquals', 'defaultTap', 'defineProperties', 'defineProperty', 'deleteProp', 'descriptors',
         'div', 'divide', 'drop', 'dropWhile', 'each', 'either', 'element', 'elementWith', 'equals', 'even', 'every',
         'exp', 'extend', 'extendOwn', 'extract', 'extractOrDefault', 'fMap', 'filter', 'first', 'firstMatch',
         'firstMatchFrom', 'flatten', 'flattenMap', 'flip', 'fmap', 'foldl', 'foldl1', 'foldr', 'foldr1', 'fst',
         'getCurrentTimeString', 'getDayOfMonth', 'getDayOfWeek', 'getErrValue', 'getFullYear', 'getHours', 'getIndex',
         'getJustValue', 'getMilliseconds', 'getMinutes', 'getMonth', 'getOkValue', 'getOwnPropertyDescriptor',
         'getOwnPropertyNames', 'getSeconds', 'getTimezoneOffset', 'getType', 'getUTCDayOfMonth', 'getUTCDayOfWeek',
         'getUTCFullYear', 'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCMonth', 'getUTCSeconds',
         'greaterThan', 'greaterThanEqual', 'gt', 'gte', 'hasOwnProperty', 'hasProperty', 'hasType', 'head', 'id',
         'init', 'inits', 'instanceOf', 'intersperse', 'is', 'isArray', 'isBoolean', 'isEmpty', 'isErr', 'isJust',
         'isMaybe', 'isNothing', 'isNull', 'isNumber', 'isObject', 'isOk', 'isPair', 'isPrototypeOf', 'isRealObject',
         'isResult', 'isString', 'isUndefined', 'join', 'keyValues', 'keys', 'last', 'leftShift', 'length', 'lessThan',
         'lessThanEqual', 'log', 'lt', 'lte', 'makeDateFromMilliseconds', 'makeDateFromString', 'makeDayDate',
         'makeHourDate', 'makeMaybeReturner', 'makeMillisecondDate', 'makeMinuteDate', 'makeMonthDate',
         'makeResultReturner', 'makeSecondDate', 'map', 'matches', 'matchesFrom', 'max', 'maximum', 'maybeCreate',
         'maybeDelete', 'maybeExtract', 'maybeModify', 'maybeModifyProp', 'maybeSet', 'maybeSetProp', 'maybeTap',
         'min', 'minimum', 'modify', 'modifyProp', 'multiply', 'not', 'notEqual', 'notEquals', 'notPred', 'nub',
         'nubWith', 'objectCurry', 'objectCurryWithArity', 'occurrences', 'occurrencesWith', 'odd', 'or', 'orPred',
         'ord', 'parseInt', 'parseIntInBase', 'permuteLeft', 'permuteRight', 'plus', 'post', 'pow', 'pre', 'prefixes',
         'prepend', 'product', 'range', 'rangeStep', 'rangeStride', 'reduce', 'reduce1', 'reduceRight', 'reduceRight1',
         'regExpSplit', 'regExpSplitCount', 'regExpSplitLimit', 'regExpSplitMax', 'rem', 'replicate', 'reverse',
         'rightShift', 'rightShiftZero', 'rotateLeft', 'rotateRight', 'safeCreateProp', 'safeDeleteProp',
         'safeExtract', 'safeModify', 'safeModifyProp', 'safeSet', 'safeSetProp', 'safeTap', 'second', 'sectionLeft',
         'sectionRight', 'set', 'setDayOfMonth', 'setFullYear', 'setHours', 'setMilliseconds', 'setMinutes',
         'setMonth', 'setProp', 'setSeconds', 'setTimeSinceEpoch', 'setUTCDayOfMonth', 'setUTCFullYear', 'setUTCHours',
         'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds', 'shallowClone', 'slice', 'snd', 'some',
         'sort', 'sortWith', 'split', 'splitCount', 'splitLimit', 'splitMax', 'splitRegExp', 'strictEquals',
         'strictInequality', 'strictNotEqual', 'strictNotEquals', 'stringToInt', 'subtract', 'suffixes', 'sum', 'tail',
         'tails', 'take', 'takeWhile', 'tap', 'test', 'toBaseAndRadix', 'toBaseAndString', 'toCharCode',
         'toDateString', 'toEpochMilliseconds', 'toExponential', 'toFixed', 'toISOString', 'toLocaleDateString',
         'toLocaleLowerCase', 'toLocaleString', 'toLocaleUpperCase', 'toLowerCase', 'toPrecision', 'toString',
         'toTimeString', 'toUTCString', 'toUpperCase', 'trim', 'uniq', 'uniqWith', 'unzip', 'wrap', 'xor', 'xorPred',
         'zip', 'zipWith'];
    });


    Object.keys(funkier).forEach(function(k) {
      var prop = funkier[k];
      if (k[0] === '_' || prop === null ||
          (typeof(prop) !== 'object' && typeof(prop) !== 'function'))
        return;

      it(k + ' is documented', function() {
        expect(documentedNames.indexOf(k)).to.not.equal(-1);
      });
    });
  });
})();
